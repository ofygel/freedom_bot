import type { Telegraf, Context } from 'telegraf';
import { parse2GisLink, routeToDeeplink } from '../utils/twoGis';
import { distanceKm, etaMinutes, isInAlmaty } from '../utils/geo';
import { calcPrice } from '../utils/pricing';
import { createOrder } from '../services/orders';
import { getSettings } from '../services/settings';

function extractLinks(text?: string): string[] {
  if (!text) return [];
  const re = /(https?:\/\/\S+)/g;
  return [...text.matchAll(re)].map(m => m[1]);
}

export default function registerOrderCommands(bot: Telegraf<Context>) {
  bot.command('order', async (ctx) => {
    const text = (ctx.message as any)?.text ?? '';
    const links = extractLinks(text);
    if (links.length < 2) {
      await ctx.reply('–§–æ—Ä–º–∞—Ç: /order <—Å—Å—ã–ª–∫–∞_2–ì–ò–°_–æ—Ç–∫—É–¥–∞> <—Å—Å—ã–ª–∫–∞_2–ì–ò–°_–∫—É–¥–∞>');
      return;
    }
    const from = parse2GisLink(links[0]);
    const to = parse2GisLink(links[1]);
    if (!from || !to) {
      await ctx.reply('–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ–¥–Ω—É –∏–∑ —Å—Å—ã–ª–æ–∫. –î–∞–π—Ç–µ –∏–º–µ–Ω–Ω–æ 2–ì–ò–°-—Å—Å—ã–ª–∫–∏ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏.');
      return;
    }
    if (!isInAlmaty(from) || !isInAlmaty(to)) {
      await ctx.reply('–°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ê–ª–º–∞—Ç—ã. –£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–∫–∏ –≤ –≥–æ—Ä–æ–¥–µ.');
      return;
    }

    const dist = distanceKm(from, to);
    const eta = etaMinutes(dist);
    const price = calcPrice(dist, new Date());
    const order = createOrder({
      customer_id: ctx.from!.id,
      from, to,
      comment: text.replace(/.*https?:\/\/\S+\s+https?:\/\/\S+\s*/,'').trim() || null,
      price_estimate: price,
    });

    const s = getSettings();
    if (s.drivers_channel_id) {
      const deeplink = routeToDeeplink(from, to);
      await bot.telegram.sendMessage(
        Number(s.drivers_channel_id),
        [
          'Ì∂ï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑',
          `–û—Ç–∫—É–¥–∞ ‚Üí –ö—É–¥–∞: ${dist.toFixed(1)} –∫–º ¬∑ ~${eta} –º–∏–Ω`,
          `–û—Ü–µ–Ω–∫–∞ —Ü–µ–Ω—ã: ~${price} ‚Ç∏`,
          deeplink ? `–ú–∞—Ä—à—Ä—É—Ç: ${deeplink}` : '',
          `ID: #${order.id}`
        ].filter(Boolean).join('\n')
      );
    }

    await ctx.reply([
      `–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω #${order.id}`,
      `–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${dist.toFixed(2)} –∫–º`,
      `–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏: ~${eta} –º–∏–Ω`,
      `–û—Ü–µ–Ω–∫–∞ —Ü–µ–Ω—ã: ~${price} ‚Ç∏`
    ].join('\n'));
  });
}
