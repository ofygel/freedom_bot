import { Telegraf, Markup, Context } from 'telegraf';
import { upsertUser, getUser } from '../services/users.js';

export default function startCommand(bot: Telegraf) {
  const pendingRoles = new Map<number, 'client' | 'courier'>();
  const pendingAgreement = new Map<number, 'client' | 'courier'>();
  const pendingCity = new Map<number, true>();

  bot.start(async (ctx) => {
    await ctx.reply(
      '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üëã\n–°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç–∞–≤–æ–∫ –≤ –ê–ª–º–∞—Ç—ã. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å.',
      Markup.keyboard([
        ['–ó–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É'],
        ['–°—Ç–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º']
      ]).oneTime().resize()
    );
  });

  const requestContact = async (ctx: Context, role: 'client' | 'courier') => {
    pendingRoles.set(ctx.from!.id, role);
    await ctx.reply(
      '–ù—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.',
      Markup.keyboard([
        [Markup.button.contactRequest('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º')]
      ]).oneTime().resize()
    );
  };

  bot.hears('–ó–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É', (ctx) => requestContact(ctx, 'client'));
  bot.hears('–°—Ç–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º', (ctx) => requestContact(ctx, 'courier'));

  bot.on('contact', async (ctx) => {
    const uid = ctx.from!.id;
    const role = pendingRoles.get(uid);
    if (!role) {
      await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å.');
      return;
    }
    const phone = ctx.message.contact?.phone_number;
    if (!phone) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º¬ª.');
      return;
    }
    upsertUser({ id: uid, phone, role, city: '–ê–ª–º–∞—Ç—ã', agreed: false });
    pendingRoles.delete(uid);
    if (role === 'client') {
      pendingCity.set(uid, true);
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ê–ª–º–∞—Ç—ã).');
    } else {
      pendingAgreement.set(uid, role);
      await ctx.reply(
        '–°–æ–≥–ª–∞—Å–Ω—ã —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Å–µ—Ä–≤–∏—Å–∞?',
        Markup.keyboard([
          ['–°–æ–≥–ª–∞—Å–µ–Ω']
        ]).oneTime().resize()
      );
    }
  });

  bot.on('text', async (ctx, next: () => Promise<void>) => {
    const uid = ctx.from!.id;
    if (pendingCity.has(uid)) {
      const city = ctx.message.text?.trim() || '–ê–ª–º–∞—Ç—ã';
      const user = getUser(uid);
      if (user) {
        upsertUser({ ...user, city });
      }
      pendingCity.delete(uid);
      pendingAgreement.set(uid, 'client');
      await ctx.reply(
        '–°–æ–≥–ª–∞—Å–Ω—ã —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Å–µ—Ä–≤–∏—Å–∞?',
        Markup.keyboard([
          ['–°–æ–≥–ª–∞—Å–µ–Ω']
        ]).oneTime().resize()
      );
      return;
    }
    return next();
  });

  bot.hears('–°–æ–≥–ª–∞—Å–µ–Ω', async (ctx) => {
    const uid = ctx.from!.id;
    const role = pendingAgreement.get(uid);
    if (!role) {
      await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º —á–µ—Ä–µ–∑ /start');
      return;
    }
    const user = getUser(uid);
    if (user) {
      upsertUser({ ...user, agreed: true });
    }
    pendingAgreement.delete(uid);
    if (role === 'client') {
      await ctx.reply(
        '–°–ø–∞—Å–∏–±–æ! –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω.',
        Markup.keyboard([
          ['–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑'],
          ['–ú–æ–∏ –∑–∞–∫–∞–∑—ã', '–ü–æ–¥–¥–µ—Ä–∂–∫–∞']
        ]).resize()
      );
    } else {
      await ctx.reply(
        '–°–ø–∞—Å–∏–±–æ! –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω.',
        Markup.keyboard([
          ['–û–Ω–ª–∞–π–Ω/–û—Ñ—Ñ–ª–∞–π–Ω', '–õ–µ–Ω—Ç–∞ –∑–∞–∫–∞–∑–æ–≤'],
          ['–ú–æ–∏ –∑–∞–∫–∞–∑—ã', '–ë–∞–ª–∞–Ω—Å/–í—ã–ø–ª–∞—Ç—ã'],
          ['–ü—Ä–æ—Ñ–∏–ª—å', '–ü–æ–¥–¥–µ—Ä–∂–∫–∞']
        ]).resize()
      );
    }
  });

  bot.hears('–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑', (ctx) => ctx.reply('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.'));
  bot.hears('–ú–æ–∏ –∑–∞–∫–∞–∑—ã', (ctx) => ctx.reply('–ó–¥–µ—Å—å –±—É–¥—É—Ç –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã.'));
  bot.hears('–ü—Ä–æ—Ñ–∏–ª—å', (ctx) => ctx.reply('–ü—Ä–æ—Ñ–∏–ª—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.'));
  bot.hears('–ü–æ–¥–¥–µ—Ä–∂–∫–∞', (ctx) => ctx.reply('–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.'));
  bot.hears('–û–Ω–ª–∞–π–Ω/–û—Ñ—Ñ–ª–∞–π–Ω', (ctx) => ctx.reply('–†–µ–∂–∏–º –∫—É—Ä—å–µ—Ä–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω.'));
  bot.hears('–õ–µ–Ω—Ç–∞ –∑–∞–∫–∞–∑–æ–≤', (ctx) => ctx.reply('–õ–µ–Ω—Ç–∞ –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.'));
  bot.hears('–ë–∞–ª–∞–Ω—Å/–í—ã–ø–ª–∞—Ç—ã', (ctx) => ctx.reply('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.'));
}
