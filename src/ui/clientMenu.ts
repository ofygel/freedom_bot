import { Markup } from 'telegraf';
import type { Telegram } from 'telegraf';
import type { Message } from 'telegraf/typings/core/types/typegram';

import type { BotContext, UserRole } from '../bot/types';

export const CLIENT_MENU = {
  taxi: 'üöï –ó–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏',
  delivery: 'üì¶ –î–æ—Å—Ç–∞–≤–∫–∞',
  orders: 'üßæ –ú–æ–∏ –∑–∞–∫–∞–∑—ã',
  support: 'üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
  city: 'üèôÔ∏è –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥',
  switchRole: 'üë• –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å',
  refresh: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é',
} as const;

const buildKeyboard = () =>
  Markup.keyboard([
    [CLIENT_MENU.taxi, CLIENT_MENU.delivery],
    [CLIENT_MENU.orders],
    [CLIENT_MENU.support, CLIENT_MENU.city],
    [CLIENT_MENU.switchRole],
    [CLIENT_MENU.refresh],
  ])
    .resize()
    .persistent();

const DEFAULT_MENU_PROMPT = '–ß—Ç–æ –¥–∞–ª—å—à–µ? –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';

export const sendClientMenu = async (
  ctx: BotContext,
  text: string = DEFAULT_MENU_PROMPT,
): Promise<Message.TextMessage | undefined> => {
  if (!ctx.chat) {
    return undefined;
  }

  try {
    return await ctx.reply(text, buildKeyboard());
  } catch {
    return undefined;
  }
};

export const sendClientMenuToChat = async (
  telegram: Telegram,
  chatId: number,
  text: string = DEFAULT_MENU_PROMPT,
): Promise<Message.TextMessage | undefined> => {
  try {
    return await telegram.sendMessage(chatId, text, buildKeyboard());
  } catch {
    return undefined;
  }
};

export const hideClientMenu = async (
  ctx: BotContext,
  text = '–û–∫, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º‚Ä¶',
): Promise<Message.TextMessage | undefined> => {
  if (!ctx.chat) {
    return undefined;
  }

  try {
    return await ctx.reply(text, Markup.removeKeyboard());
  } catch {
    return undefined;
  }
};

export const isClientChat = (ctx: BotContext, role?: UserRole): boolean =>
  ctx.chat?.type === 'private' && (role === 'client' || role === undefined);

export const clientMenuText = (city?: string) =>
  [
    'üéØ –ú–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞',
    city ? `–¢–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥: ${city}.` : undefined,
    city ? '' : undefined,
    '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å:',
    '‚Ä¢ üöï –¢–∞–∫—Å–∏ ‚Äî –ø–æ–¥–∞—á–∞ –º–∞—à–∏–Ω—ã –∏ –ø–æ–µ–∑–¥–∫–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É.',
    '‚Ä¢ üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ ‚Äî –∫—É—Ä—å–µ—Ä –∑–∞–±–µ—Ä—ë—Ç –∏ –¥–æ—Å—Ç–∞–≤–∏—Ç –≤–∞—à—É –ø–æ—Å—ã–ª–∫—É.',
    '‚Ä¢ üßæ –ú–æ–∏ –∑–∞–∫–∞–∑—ã ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏.',
    '‚Ä¢ üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å.',
    '‚Ä¢ üèôÔ∏è –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ ‚Äî –æ–±–Ω–æ–≤–∏—Ç–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏—é –∑–∞–∫–∞–∑–æ–≤.',
    '‚Ä¢ üë• –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ —Ä–µ–∂–∏–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞.',
  ]
    .filter((line): line is string => typeof line === 'string')
    .join('\n');
