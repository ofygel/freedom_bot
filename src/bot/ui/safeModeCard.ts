import type { BotContext } from '../types';
import { ui } from '../ui';
import { buildInlineKeyboard } from '../keyboards/common';

export const SAFE_MODE_CARD_STEP_ID = 'common:safe-mode:card';

const SAFE_MODE_PROFILE_ACTION = 'safe-mode:profile';
const SAFE_MODE_CITY_ACTION = 'safe-mode:city';
const SAFE_MODE_SUPPORT_ACTION = 'safe-mode:support';

export const SAFE_MODE_CARD_ACTIONS = {
  profile: SAFE_MODE_PROFILE_ACTION,
  city: SAFE_MODE_CITY_ACTION,
  support: SAFE_MODE_SUPPORT_ACTION,
} as const;

const buildSafeModeKeyboard = () =>
  buildInlineKeyboard([
    [
      { label: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', action: SAFE_MODE_PROFILE_ACTION },
      { label: 'üèôÔ∏è –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥', action: SAFE_MODE_CITY_ACTION },
    ],
    [{ label: 'üÜò –ü–æ–º–æ—â—å', action: SAFE_MODE_SUPPORT_ACTION }],
  ]);

export const buildSafeModeCardText = (prompt?: string): string => {
  const lines = [
    '‚ö†Ô∏è Freedom Bot —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ä–µ–∂–∏–º–µ ‚Äî —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.',
    prompt ?? '–ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: [–ü—Ä–æ—Ñ–∏–ª—å], [–°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥], [–ü–æ–º–æ—â—å].',
    '',
    '‚Ä¢ üë§ –ü—Ä–æ—Ñ–∏–ª—å ‚Äî –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞.',
    '‚Ä¢ üèôÔ∏è –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ ‚Äî —É—Ç–æ—á–Ω–∏—Ç–µ —Ä–∞–±–æ—á–∏–π –≥–æ—Ä–æ–¥.',
    '‚Ä¢ üÜò –ü–æ–º–æ—â—å ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.',
  ];

  return lines.join('\n');
};

export interface ShowSafeModeCardOptions {
  prompt?: string;
}

export const showSafeModeCard = async (
  ctx: BotContext,
  options: ShowSafeModeCardOptions = {},
): Promise<void> => {
  const chatId = ctx.chat?.id;
  if (!chatId) {
    return;
  }

  await ui.step(ctx, {
    id: SAFE_MODE_CARD_STEP_ID,
    text: buildSafeModeCardText(options.prompt),
    keyboard: buildSafeModeKeyboard(),
    cleanup: false,
  });
};

export const __testing__ = {
  buildSafeModeCardText,
  SAFE_MODE_CARD_ACTIONS,
};
