import { Telegraf } from 'telegraf';
import type {
  InlineKeyboardMarkup,
  Location as TelegramLocation,
} from 'telegraf/typings/core/types/typegram';

import { publishOrderToDriversChannel, type PublishOrderStatus } from '../../channels/ordersChannel';
import { logger } from '../../../config';
import { createOrder } from '../../../db/orders';
import type { OrderRecord } from '../../../types';
import {
  buildCustomerName,
  buildOrderSummary,
  isOrderDraftComplete,
  resetClientOrderDraft,
  type CompletedOrderDraft,
} from '../../services/orders';
import {
  geocodeOrderLocation,
  geocodeTelegramLocation,
  isTwoGisLink,
} from '../../services/geocode';
import {
  estimateDeliveryPrice,
  formatPriceAmount,
} from '../../services/pricing';
import { rememberEphemeralMessage, clearInlineKeyboard } from '../../services/cleanup';
import { ensurePrivateCallback, isPrivateChat } from '../../services/access';
import { buildConfirmCancelKeyboard } from '../../keyboards/common';
import type { BotContext, ClientOrderDraftState } from '../../types';
import { ui } from '../../ui';
import { CLIENT_MENU_ACTION } from './menu';

export const START_DELIVERY_ORDER_ACTION = 'client:order:delivery:start';
const CONFIRM_DELIVERY_ORDER_ACTION = 'client:order:delivery:confirm';
const CANCEL_DELIVERY_ORDER_ACTION = 'client:order:delivery:cancel';

const getDraft = (ctx: BotContext): ClientOrderDraftState => ctx.session.client.delivery;

const DELIVERY_STEP_ID = 'client:delivery:step';

const updateDeliveryStep = (
  ctx: BotContext,
  text: string,
  keyboard?: InlineKeyboardMarkup,
) =>
  ui.step(ctx, {
    id: DELIVERY_STEP_ID,
    text,
    keyboard,
    homeAction: CLIENT_MENU_ACTION,
  });

const ADDRESS_INPUT_HINTS = [
  '‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É 2–ì–ò–° –Ω–∞ —Ç–æ—á–∫—É.',
  '‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π —á–µ—Ä–µ–∑ Telegram (—Å–∫—Ä–µ–ø–∫–∞ ‚Üí ¬´–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è¬ª).',
  '‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é ‚Äî –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≥–æ—Ä–æ–¥, —É–ª–∏—Ü—É –∏ –¥–æ–º.',
] as const;

const buildAddressPrompt = (lines: string[]): string =>
  [...lines, ...ADDRESS_INPUT_HINTS].join('\n');

const remindManualAddressAccuracy = async (ctx: BotContext): Promise<void> => {
  const warning = await ctx.reply(
    '‚ö†Ô∏è –ü—Ä–∏ —Ä—É—á–Ω–æ–º –≤–≤–æ–¥–µ –∞–¥—Ä–µ—Å–∞ —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, —É–ª–∏—Ü—É, –¥–æ–º –∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã. –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ 2–ì–ò–° –∏–ª–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë.',
  );
  rememberEphemeralMessage(ctx, warning.message_id);
};

const remindConfirmationActions = async (ctx: BotContext): Promise<void> => {
  const reminder = await ctx.reply(
    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑.',
  );
  rememberEphemeralMessage(ctx, reminder.message_id);
};

const remindDeliveryCommentRequirement = async (ctx: BotContext): Promise<void> => {
  const warning = await ctx.reply(
    '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω. –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∫—É—Ä—å–µ—Ä—É –∏ –∫–æ–º—É, —É–∫–∞–∂–∏—Ç–µ –ø–æ–¥—ä–µ–∑–¥, –∫–æ–¥ –¥–æ–º–æ—Ñ–æ–Ω–∞ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã.',
  );
  rememberEphemeralMessage(ctx, warning.message_id);
};

const requestPickupAddress = async (ctx: BotContext): Promise<void> => {
  await updateDeliveryStep(
    ctx,
    buildAddressPrompt(['–£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–∫—É –∑–∞–±–æ—Ä–∞ –ø–æ—Å—ã–ª–∫–∏ –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:']),
  );
};

const requestDropoffAddress = async (ctx: BotContext, pickup: CompletedOrderDraft['pickup']): Promise<void> => {
  await updateDeliveryStep(
    ctx,
    buildAddressPrompt([
      `–ê–¥—Ä–µ—Å –∑–∞–±–æ—Ä–∞: ${pickup.address}.`,
      '',
      '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:',
    ]),
  );
};

const requestDeliveryComment = async (
  ctx: BotContext,
  draft: ClientOrderDraftState,
): Promise<void> => {
  if (!draft.pickup || !draft.dropoff) {
    return;
  }

  await updateDeliveryStep(
    ctx,
    [
      `–ê–¥—Ä–µ—Å –∑–∞–±–æ—Ä–∞: ${draft.pickup.address}.`,
      `–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${draft.dropoff.address}.`,
      '',
      '–î–æ–±–∞–≤—å—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∫—É—Ä—å–µ—Ä–∞:',
      '‚Ä¢ –ß—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –∏–ª–∏ –¥–æ—Å—Ç–∞–≤–∏—Ç—å.',
      '‚Ä¢ –ö–æ–º—É –ø–µ—Ä–µ–¥–∞—Ç—å –∏ –∫–∞–∫ —Å –Ω–∏–º —Å–≤—è–∑–∞—Ç—å—Å—è.',
      '‚Ä¢ –ü–æ–¥—ä–µ–∑–¥, –∫–æ–¥ –¥–æ–º–æ—Ñ–æ–Ω–∞ –∏ –¥—Ä—É–≥–∏–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã.',
    ].join('\n'),
  );
};

const handleGeocodingFailure = async (ctx: BotContext): Promise<void> => {
  const message = await ctx.reply(
    '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞–¥—Ä–µ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
  );
  rememberEphemeralMessage(ctx, message.message_id);
};

const applyPickupDetails = async (
  ctx: BotContext,
  draft: ClientOrderDraftState,
  pickup: CompletedOrderDraft['pickup'],
): Promise<void> => {
  draft.pickup = pickup;
  draft.stage = 'collectingDropoff';

  await requestDropoffAddress(ctx, pickup);
};

const applyDropoffDetails = async (
  ctx: BotContext,
  draft: ClientOrderDraftState,
  dropoff: CompletedOrderDraft['dropoff'],
): Promise<void> => {
  draft.dropoff = dropoff;

  if (!draft.pickup) {
    logger.warn('Delivery order draft is missing pickup after dropoff geocode');
    draft.stage = 'idle';
    return;
  }

  draft.price = estimateDeliveryPrice(draft.pickup, dropoff);
  draft.stage = 'collectingComment';

  await requestDeliveryComment(ctx, draft);
};

const applyPickupAddress = async (ctx: BotContext, draft: ClientOrderDraftState, text: string) => {
  const pickup = await geocodeOrderLocation(text);
  if (!pickup) {
    await handleGeocodingFailure(ctx);
    return;
  }
  await applyPickupDetails(ctx, draft, pickup);

  if (!isTwoGisLink(text)) {
    await remindManualAddressAccuracy(ctx);
  }
};

const buildConfirmationKeyboard = () =>
  buildConfirmCancelKeyboard(CONFIRM_DELIVERY_ORDER_ACTION, CANCEL_DELIVERY_ORDER_ACTION);

const showConfirmation = async (ctx: BotContext, draft: CompletedOrderDraft): Promise<void> => {
  const comment = draft.notes?.trim();
  const summary = buildOrderSummary(draft, {
    title: 'üöö –î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º',
    pickupLabel: 'üì¶ –ó–∞–±–æ—Ä',
    dropoffLabel: 'üìÆ –î–æ—Å—Ç–∞–≤–∫–∞',
    distanceLabel: 'üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ',
    priceLabel: 'üí∞ –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏',
    instructions: comment
      ? ['üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ' + comment, '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ.']
      : undefined,
  });

  const keyboard = buildConfirmationKeyboard();
  const result = await updateDeliveryStep(ctx, summary, keyboard);
  draft.confirmationMessageId = result?.messageId;
};

const applyDropoffAddress = async (
  ctx: BotContext,
  draft: ClientOrderDraftState,
  text: string,
): Promise<void> => {
  const dropoff = await geocodeOrderLocation(text);
  if (!dropoff) {
    await handleGeocodingFailure(ctx);
    return;
  }
  await applyDropoffDetails(ctx, draft, dropoff);

  if (!isTwoGisLink(text)) {
    await remindManualAddressAccuracy(ctx);
  }
};

const applyPickupLocation = async (
  ctx: BotContext,
  draft: ClientOrderDraftState,
  location: TelegramLocation,
): Promise<void> => {
  const pickup = await geocodeTelegramLocation(location, { label: '–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è –∑–∞–±–æ—Ä–∞' });
  if (!pickup) {
    await handleGeocodingFailure(ctx);
    return;
  }

  await applyPickupDetails(ctx, draft, pickup);
};

const applyDropoffLocation = async (
  ctx: BotContext,
  draft: ClientOrderDraftState,
  location: TelegramLocation,
): Promise<void> => {
  const dropoff = await geocodeTelegramLocation(location, { label: '–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏' });
  if (!dropoff) {
    await handleGeocodingFailure(ctx);
    return;
  }

  await applyDropoffDetails(ctx, draft, dropoff);
};

const applyDeliveryComment = async (
  ctx: BotContext,
  draft: ClientOrderDraftState,
  text: string,
): Promise<void> => {
  const trimmed = text.trim();
  if (!trimmed) {
    await remindDeliveryCommentRequirement(ctx);
    return;
  }

  draft.notes = trimmed;
  draft.stage = 'awaitingConfirmation';

  if (isOrderDraftComplete(draft)) {
    await showConfirmation(ctx, draft);
    return;
  }

  logger.warn('Delivery order draft is incomplete after collecting comment');
  draft.stage = 'idle';
  const failure = await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.');
  rememberEphemeralMessage(ctx, failure.message_id);
};

const cancelOrderDraft = async (ctx: BotContext, draft: ClientOrderDraftState): Promise<void> => {
  await clearInlineKeyboard(ctx, draft.confirmationMessageId);
  resetClientOrderDraft(draft);

  const message = await ctx.reply('–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
  rememberEphemeralMessage(ctx, message.message_id);
};

const notifyOrderCreated = async (
  ctx: BotContext,
  order: OrderRecord,
  publishStatus: PublishOrderStatus,
): Promise<void> => {
  const lines = [
    `–ó–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É ‚Ññ${order.id} —Å–æ–∑–¥–∞–Ω.`,
    `–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ —Ä–∞—Å—á—ë—Ç—É: ${formatPriceAmount(order.price.amount, order.price.currency)}.`,
  ];

  if (publishStatus === 'missing_channel') {
    lines.push('‚ö†Ô∏è –ö–∞–Ω–∞–ª –∫—É—Ä—å–µ—Ä–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤—Ä—É—á–Ω—É—é.');
  }

  const message = await ctx.reply(lines.join('\n'));
  rememberEphemeralMessage(ctx, message.message_id);
};

const confirmOrder = async (ctx: BotContext, draft: ClientOrderDraftState): Promise<void> => {
  if (!isOrderDraftComplete(draft)) {
    const warning = await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–æ–≤.');
    rememberEphemeralMessage(ctx, warning.message_id);
    resetClientOrderDraft(draft);
    return;
  }

  const comment = draft.notes?.trim();
  if (!comment) {
    draft.stage = 'collectingComment';
    await remindDeliveryCommentRequirement(ctx);
    await requestDeliveryComment(ctx, draft);
    return;
  }

  if (draft.stage === 'creatingOrder') {
    await ctx.answerCbQuery('–ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.');
    return;
  }

  draft.stage = 'creatingOrder';

  try {
    const order = await createOrder({
      kind: 'delivery',
      clientId: ctx.session.user?.id,
      clientPhone: ctx.session.phoneNumber,
      pickup: draft.pickup,
      dropoff: draft.dropoff,
      price: draft.price,
      metadata: {
        customerName: buildCustomerName(ctx),
        customerUsername: ctx.session.user?.username,
        notes: comment,
      },
    });

    const publishResult = await publishOrderToDriversChannel(ctx.telegram, order.id);
    await notifyOrderCreated(ctx, order, publishResult.status);
  } catch (error) {
    logger.error({ err: error }, 'Failed to create delivery order');
    const failure = await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    rememberEphemeralMessage(ctx, failure.message_id);
  } finally {
    await clearInlineKeyboard(ctx, draft.confirmationMessageId);
    resetClientOrderDraft(draft);
  }
};

const processCancellationText = async (
  ctx: BotContext,
  draft: ClientOrderDraftState,
  text: string,
): Promise<boolean> => {
  const normalized = text.trim().toLowerCase();
  if (normalized === '/cancel' || normalized === '–æ—Ç–º–µ–Ω–∞' || normalized === 'cancel') {
    await cancelOrderDraft(ctx, draft);
    return true;
  }

  return false;
};

const handleIncomingText = async (ctx: BotContext, next: () => Promise<void>): Promise<void> => {
  if (!isPrivateChat(ctx)) {
    await next();
    return;
  }

  const message = ctx.message;
  if (!message || !('text' in message)) {
    await next();
    return;
  }

  const text = message.text.trim();
  if (text.startsWith('/')) {
    const draft = getDraft(ctx);
    const cancelled = await processCancellationText(ctx, draft, text);
    if (!cancelled) {
      await next();
    }
    return;
  }

  const draft = getDraft(ctx);
  switch (draft.stage) {
    case 'collectingPickup':
      if (await processCancellationText(ctx, draft, text)) {
        return;
      }
      await applyPickupAddress(ctx, draft, text);
      break;
    case 'collectingDropoff':
      if (await processCancellationText(ctx, draft, text)) {
        return;
      }
      await applyDropoffAddress(ctx, draft, text);
      break;
    case 'collectingComment':
      if (await processCancellationText(ctx, draft, text)) {
        return;
      }
      await applyDeliveryComment(ctx, draft, text);
      break;
    case 'awaitingConfirmation': {
      if (await processCancellationText(ctx, draft, text)) {
        return;
      }
      await remindConfirmationActions(ctx);
      break;
    }
    default:
      await next();
  }
};

const handleIncomingLocation = async (
  ctx: BotContext,
  next: () => Promise<void>,
): Promise<void> => {
  if (!isPrivateChat(ctx)) {
    await next();
    return;
  }

  const message = ctx.message;
  if (!message || !('location' in message) || !message.location) {
    await next();
    return;
  }

  const draft = getDraft(ctx);

  switch (draft.stage) {
    case 'collectingPickup':
      await applyPickupLocation(ctx, draft, message.location);
      return;
    case 'collectingDropoff':
      await applyDropoffLocation(ctx, draft, message.location);
      return;
    case 'collectingComment':
      await remindDeliveryCommentRequirement(ctx);
      return;
    case 'awaitingConfirmation':
      await remindConfirmationActions(ctx);
      return;
    default:
      await next();
  }
};

const handleStart = async (ctx: BotContext): Promise<void> => {
  if (!(await ensurePrivateCallback(ctx, undefined, '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.'))) {
    return;
  }

  const draft = getDraft(ctx);
  resetClientOrderDraft(draft);
  draft.stage = 'collectingPickup';
  resetClientOrderDraft(ctx.session.client.taxi);

  await requestPickupAddress(ctx);
};

const handleConfirmationAction = async (ctx: BotContext): Promise<void> => {
  if (!(await ensurePrivateCallback(ctx, undefined, '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.'))) {
    return;
  }

  const draft = getDraft(ctx);
  await confirmOrder(ctx, draft);
};

const handleCancellationAction = async (ctx: BotContext): Promise<void> => {
  if (!(await ensurePrivateCallback(ctx, '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', '–û—Ç–º–µ–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.'))) {
    return;
  }

  const draft = getDraft(ctx);
  await cancelOrderDraft(ctx, draft);
};

export const registerDeliveryOrderFlow = (bot: Telegraf<BotContext>): void => {
  bot.action(START_DELIVERY_ORDER_ACTION, async (ctx) => {
    await handleStart(ctx);
  });

  bot.action(CONFIRM_DELIVERY_ORDER_ACTION, async (ctx) => {
    await handleConfirmationAction(ctx);
  });

  bot.action(CANCEL_DELIVERY_ORDER_ACTION, async (ctx) => {
    await handleCancellationAction(ctx);
  });

  bot.command('delivery', async (ctx) => {
    if (!isPrivateChat(ctx)) {
      return;
    }

    const draft = getDraft(ctx);
    resetClientOrderDraft(draft);
    draft.stage = 'collectingPickup';
    resetClientOrderDraft(ctx.session.client.taxi);

    await requestPickupAddress(ctx);
  });

  bot.on('location', async (ctx, next) => {
    await handleIncomingLocation(ctx, next);
  });

  bot.on('text', async (ctx, next) => {
    await handleIncomingText(ctx, next);
  });
};
