import { Telegraf } from 'telegraf';
import type { InlineKeyboardMarkup } from 'telegraf/typings/core/types/typegram';

import {
  cancelClientOrder,
  getOrderWithExecutorById,
  listClientOrders,
} from '../../../db/orders';
import { handleClientOrderCancellation } from '../../channels/ordersChannel';
import { buildInlineKeyboard, mergeInlineKeyboards } from '../../keyboards/common';
import { buildOrderLocationsKeyboard } from '../../keyboards/orders';
import { ensurePrivateCallback, isPrivateChat } from '../../services/access';
import { formatDistance, formatEtaMinutes, formatPriceAmount } from '../../services/pricing';
import type { BotContext } from '../../types';
import type { OrderStatus, OrderWithExecutor } from '../../../types';
import { ui } from '../../ui';
import { CLIENT_MENU_ACTION } from './menu';
import {
  CLIENT_CANCEL_ORDER_ACTION_PATTERN,
  CLIENT_CANCEL_ORDER_ACTION_PREFIX,
  CLIENT_CONFIRM_CANCEL_ORDER_ACTION_PATTERN,
  CLIENT_CONFIRM_CANCEL_ORDER_ACTION_PREFIX,
  CLIENT_ORDERS_ACTION,
  CLIENT_VIEW_ORDER_ACTION_PATTERN,
  CLIENT_VIEW_ORDER_ACTION_PREFIX,
} from './orderActions';

const CLIENT_ORDERS_LIST_STEP_ID = 'client:orders:list';
const CLIENT_ORDER_DETAIL_STEP_ID = 'client:orders:detail';

const ACTIVE_ORDER_STATUSES: OrderStatus[] = ['open', 'claimed'];

const ORDER_KIND_ICONS: Record<OrderWithExecutor['kind'], string> = {
  taxi: 'üöï',
  delivery: 'üöö',
};

const ORDER_KIND_LABELS: Record<OrderWithExecutor['kind'], string> = {
  taxi: '–¢–∞–∫—Å–∏',
  delivery: '–î–æ—Å—Ç–∞–≤–∫–∞',
};

const ORDER_STATUS_TEXT: Record<OrderStatus, { short: string; full: string }> = {
  open: { short: '–æ–∂–∏–¥–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è', full: '–û–∂–∏–¥–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è' },
  claimed: { short: '–≤ —Ä–∞–±–æ—Ç–µ', full: '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º' },
  cancelled: { short: '–æ—Ç–º–µ–Ω—ë–Ω', full: '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω' },
  done: { short: '–∑–∞–≤–µ—Ä—à—ë–Ω', full: '–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω' },
};

interface OrderDetailOptions {
  confirmCancellation?: boolean;
}

const formatStatusLabel = (status: OrderStatus): { short: string; full: string } =>
  ORDER_STATUS_TEXT[status] ?? { short: status, full: status };

const formatFullName = (first?: string, last?: string): string | undefined => {
  const full = [first?.trim(), last?.trim()].filter(Boolean).join(' ').trim();
  return full || undefined;
};

const formatExecutorLabel = (order: OrderWithExecutor): string => {
  const executor = order.executor;
  if (!executor) {
    return typeof order.claimedBy === 'number' ? `ID ${order.claimedBy}` : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }

  const fullName = formatFullName(executor.firstName, executor.lastName);
  if (fullName && executor.username) {
    return `${fullName} (@${executor.username})`;
  }

  if (fullName) {
    return fullName;
  }

  if (executor.username) {
    return `@${executor.username}`;
  }

  return `ID ${executor.telegramId}`;
};

const normalisePhoneNumber = (phone: string): string => phone.replace(/[\s()-]/g, '');

const buildContactKeyboard = (order: OrderWithExecutor): InlineKeyboardMarkup | undefined => {
  if (order.status !== 'claimed') {
    return undefined;
  }

  const executor = order.executor;
  if (!executor) {
    return undefined;
  }

  const rows: { label: string; url: string }[][] = [];
  const phone = executor.phone?.trim();
  if (phone) {
    rows.push([{ label: 'üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å', url: `tel:${normalisePhoneNumber(phone)}` }]);
  }

  const chatUrl = executor.username
    ? `https://t.me/${executor.username}`
    : executor.telegramId
    ? `tg://user?id=${executor.telegramId}`
    : undefined;
  if (chatUrl) {
    rows.push([{ label: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram', url: chatUrl }]);
  }

  if (rows.length === 0) {
    return undefined;
  }

  return buildInlineKeyboard(rows);
};

const buildControlKeyboard = (
  order: OrderWithExecutor,
  options: OrderDetailOptions,
): InlineKeyboardMarkup => {
  const rows: { label: string; action: string }[][] = [];

  if (order.status === 'open' || order.status === 'claimed') {
    if (options.confirmCancellation) {
      rows.push([
        {
          label: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–º–µ–Ω—É',
          action: `${CLIENT_CONFIRM_CANCEL_ORDER_ACTION_PREFIX}:${order.id}`,
        },
      ]);
      rows.push([
        { label: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', action: `${CLIENT_VIEW_ORDER_ACTION_PREFIX}:${order.id}` },
      ]);
    } else {
      rows.push([
        { label: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', action: `${CLIENT_CANCEL_ORDER_ACTION_PREFIX}:${order.id}` },
      ]);
    }
  }

  rows.push([{ label: 'üìã –í—Å–µ –∑–∞–∫–∞–∑—ã', action: CLIENT_ORDERS_ACTION }]);

  return buildInlineKeyboard(rows);
};

const buildOrderDetailKeyboard = (
  order: OrderWithExecutor,
  options: OrderDetailOptions,
): InlineKeyboardMarkup | undefined => {
  const locationsKeyboard = buildOrderLocationsKeyboard(order.pickup, order.dropoff);
  const contactKeyboard = buildContactKeyboard(order);
  const controlsKeyboard = buildControlKeyboard(order, options);

  return mergeInlineKeyboards(locationsKeyboard, contactKeyboard, controlsKeyboard);
};

const buildOrderDetailText = (
  order: OrderWithExecutor,
  options: OrderDetailOptions,
): string => {
  const status = formatStatusLabel(order.status);
  const headerIcon = ORDER_KIND_ICONS[order.kind] ?? 'üì¶';
  const kindLabel = ORDER_KIND_LABELS[order.kind] ?? '–ó–∞–∫–∞–∑';
  const lines: string[] = [];

  lines.push(`${headerIcon} ${kindLabel} ‚Ññ${order.shortId}`);
  lines.push(`–°—Ç–∞—Ç—É—Å: ${status.full}.`);
  lines.push('');
  lines.push(`üìç –ü–æ–¥–∞—á–∞: ${order.pickup.address}`);
  lines.push(`üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: ${order.dropoff.address}`);
  lines.push(`üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${formatDistance(order.price.distanceKm)} –∫–º`);
  lines.push(`‚è±Ô∏è –í –ø—É—Ç–∏: ‚âà${formatEtaMinutes(order.price.etaMinutes)} –º–∏–Ω`);
  lines.push(`üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${formatPriceAmount(order.price.amount, order.price.currency)}`);

  if (order.clientComment?.trim()) {
    lines.push('', `üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${order.clientComment.trim()}`);
  }

  if (order.status === 'claimed') {
    lines.push('');
    lines.push(`üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${formatExecutorLabel(order)}`);
    if (order.executor?.phone?.trim()) {
      lines.push(`üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${order.executor.phone.trim()}`);
    }
    if (order.executor?.username?.trim()) {
      lines.push(`üîó Telegram: @${order.executor.username.trim()}`);
    }
  }

  if (options.confirmCancellation) {
    lines.push('');
    lines.push('‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞. –ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –æ–Ω —Å—Ç–∞–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º.');
  }

  lines.push('');
  lines.push('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑–æ–º.');

  return lines.join('\n');
};

const renderOrderDetail = async (
  ctx: BotContext,
  order: OrderWithExecutor,
  options: OrderDetailOptions = {},
): Promise<void> => {
  const text = buildOrderDetailText(order, options);
  const keyboard = buildOrderDetailKeyboard(order, options);

  await ui.step(ctx, {
    id: CLIENT_ORDER_DETAIL_STEP_ID,
    text,
    keyboard,
    homeAction: CLIENT_MENU_ACTION,
  });
};

const buildOrdersListText = (orders: OrderWithExecutor[]): string => {
  if (orders.length === 0) {
    return [
      'üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.',
      '',
      '–û—Ñ–æ—Ä–º–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞.',
    ].join('\n');
  }

  const lines: string[] = [];
  lines.push(`üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã (${orders.length})`);
  lines.push('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–∫–∞–∑, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏.');
  lines.push('');

  for (const order of orders) {
    const status = formatStatusLabel(order.status);
    const icon = ORDER_KIND_ICONS[order.kind] ?? 'üì¶';
    lines.push(`‚Ä¢ ${icon} ‚Ññ${order.shortId} ‚Äî ${status.full}`);
  }

  lines.push('');
  lines.push('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑–∞–º–∏.');

  return lines.join('\n');
};

const buildOrdersListKeyboard = (orders: OrderWithExecutor[]): InlineKeyboardMarkup => {
  const rows: { label: string; action: string }[][] = orders.map((order) => [
    {
      label: `${ORDER_KIND_ICONS[order.kind] ?? 'üì¶'} ‚Ññ${order.shortId}`,
      action: `${CLIENT_VIEW_ORDER_ACTION_PREFIX}:${order.id}`,
    },
  ]);

  rows.push([{ label: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫', action: CLIENT_ORDERS_ACTION }]);

  return buildInlineKeyboard(rows);
};

const renderOrdersList = async (
  ctx: BotContext,
  orders?: OrderWithExecutor[],
): Promise<OrderWithExecutor[]> => {
  const items = orders ?? (await listClientOrders(ctx.auth.user.telegramId, {
    statuses: ACTIVE_ORDER_STATUSES,
    limit: 10,
  }));

  const text = buildOrdersListText(items);
  const keyboard = buildOrdersListKeyboard(items);

  await ui.step(ctx, {
    id: CLIENT_ORDERS_LIST_STEP_ID,
    text,
    keyboard,
    homeAction: CLIENT_MENU_ACTION,
  });

  return items;
};

const showClientOrderDetail = async (
  ctx: BotContext,
  orderId: number,
  options: OrderDetailOptions = {},
): Promise<OrderWithExecutor | null> => {
  const order = await getOrderWithExecutorById(orderId);
  if (!order || order.clientId !== ctx.auth.user.telegramId) {
    await ctx.answerCbQuery('–ó–∞–∫–∞–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
    return null;
  }

  await renderOrderDetail(ctx, order, options);
  return order;
};

const confirmClientOrderCancellation = async (
  ctx: BotContext,
  orderId: number,
): Promise<void> => {
  const clientId = ctx.auth.user.telegramId;
  const cancelled = await cancelClientOrder(orderId, clientId);

  if (!cancelled) {
    await ctx.answerCbQuery('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.');
    const current = await getOrderWithExecutorById(orderId);
    if (current && current.clientId === clientId) {
      await renderOrderDetail(ctx, current);
    }
    await renderOrdersList(ctx);
    return;
  }

  try {
    await handleClientOrderCancellation(ctx.telegram, cancelled);
  } catch (error) {
    // –û—à–∏–±–∫–∏ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–æ—Ç–æ–∫.
  }

  await ctx.answerCbQuery('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.');
  await renderOrderDetail(ctx, cancelled);
  await renderOrdersList(ctx);
};

export const registerClientOrdersFlow = (bot: Telegraf<BotContext>): void => {
  bot.action(CLIENT_ORDERS_ACTION, async (ctx) => {
    if (!(await ensurePrivateCallback(ctx))) {
      return;
    }

    await renderOrdersList(ctx);
  });

  bot.action(CLIENT_VIEW_ORDER_ACTION_PATTERN, async (ctx) => {
    if (!(await ensurePrivateCallback(ctx))) {
      return;
    }

    const match = ctx.match as RegExpMatchArray | undefined;
    const idText = match?.[1];
    const orderId = idText ? Number.parseInt(idText, 10) : NaN;
    if (!Number.isInteger(orderId) || orderId <= 0) {
      await ctx.answerCbQuery('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞.');
      return;
    }

    await showClientOrderDetail(ctx, orderId);
  });

  bot.action(CLIENT_CANCEL_ORDER_ACTION_PATTERN, async (ctx) => {
    if (!(await ensurePrivateCallback(ctx))) {
      return;
    }

    const match = ctx.match as RegExpMatchArray | undefined;
    const idText = match?.[1];
    const orderId = idText ? Number.parseInt(idText, 10) : NaN;
    if (!Number.isInteger(orderId) || orderId <= 0) {
      await ctx.answerCbQuery('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞.');
      return;
    }

    await showClientOrderDetail(ctx, orderId, { confirmCancellation: true });
  });

  bot.action(CLIENT_CONFIRM_CANCEL_ORDER_ACTION_PATTERN, async (ctx) => {
    if (!(await ensurePrivateCallback(ctx))) {
      return;
    }

    const match = ctx.match as RegExpMatchArray | undefined;
    const idText = match?.[1];
    const orderId = idText ? Number.parseInt(idText, 10) : NaN;
    if (!Number.isInteger(orderId) || orderId <= 0) {
      await ctx.answerCbQuery('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞.');
      return;
    }

    await confirmClientOrderCancellation(ctx, orderId);
  });

  bot.command('orders', async (ctx) => {
    if (!isPrivateChat(ctx)) {
      return;
    }

    await renderOrdersList(ctx);
  });
};
