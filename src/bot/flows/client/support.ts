import { Telegraf } from 'telegraf';
import type { Message, MessageEntity } from 'telegraf/typings/core/types/typegram';

import { logger } from '../../../config';
import { pool } from '../../../db';
import { isClientChat, sendClientMenu } from '../../../ui/clientMenu';
import { forwardSupportMessage } from '../../services/support';
import type { BotContext } from '../../types';

const ensureSupportState = (ctx: BotContext) => {
  if (!ctx.session.support) {
    ctx.session.support = { status: 'idle' };
  }

  return ctx.session.support;
};

const buildSupportPromptText = (): string =>
  [
    'üÜò –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.',
    '',
    '–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Äî –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.',
    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.',
    '',
    '–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Å–Ω–∏–∑—É –∏–ª–∏ /start.',
  ].join('\n');

const buildSupportAcknowledgementText = (shortId?: string): string => {
  const lines = [
    '‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.',
    '–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç ‚Äî –º—ã –Ω–∞–ø–∏—à–µ–º –≤–∞–º –≤ —ç—Ç–æ—Ç —á–∞—Ç.',
  ];

  if (shortId) {
    lines.splice(1, 0, `–ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: ${shortId}.`);
  }

  return lines.join('\n');
};

const buildSupportUnavailableText = (): string =>
  [
    '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
    '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–¥–Ω–µ–µ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏ —Å–≤—è–∑–∏.',
  ].join('\n');

const buildSupportRetryText = (): string =>
  [
    '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏.',
    '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
  ].join('\n');

const fetchSupportThreadShortId = async (
  threadId: string,
): Promise<string | undefined> => {
  try {
    const result = await pool.query<{ short_id: string }>(
      `
        SELECT short_id
        FROM support_threads
        WHERE id = $1
      `,
      [threadId],
    );

    return result.rows[0]?.short_id ?? undefined;
  } catch (error) {
    logger.error({ err: error, threadId }, 'Failed to fetch short id for client support thread');
    return undefined;
  }
};

const isBotCommandMessage = (message: Message): boolean => {
  const textEntitySource = message as Partial<Message.TextMessage>;
  const captionEntitySource = message as Partial<{ caption?: string; caption_entities?: MessageEntity[] }>;

  const entities = textEntitySource.entities ?? captionEntitySource.caption_entities;
  if (entities?.some((entity) => entity.type === 'bot_command' && entity.offset === 0)) {
    return true;
  }

  const text = textEntitySource.text ?? captionEntitySource.caption;
  return typeof text === 'string' && text.startsWith('/');
};

export const promptClientSupport = async (ctx: BotContext): Promise<void> => {
  const support = ensureSupportState(ctx);

  if (!isClientChat(ctx, ctx.auth?.user.role)) {
    await ctx.reply('–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.');
    return;
  }

  if (support.status !== 'awaiting_message') {
    support.status = 'awaiting_message';
    support.lastThreadId = undefined;
    support.lastThreadShortId = undefined;
  }

  await ctx.reply(buildSupportPromptText());
};

const handleSupportMessage = async (ctx: BotContext): Promise<boolean> => {
  const support = ensureSupportState(ctx);

  if (!isClientChat(ctx, ctx.auth?.user.role)) {
    return false;
  }

  if (ctx.chat?.type !== 'private') {
    return false;
  }

  if (support.status !== 'awaiting_message') {
    return false;
  }

  const message = ctx.message as Message | undefined;
  if (!message) {
    return false;
  }

  if (isBotCommandMessage(message)) {
    support.status = 'idle';
    return false;
  }

  const result = await forwardSupportMessage(ctx);

  if (result.status === 'missing_channel') {
    support.status = 'idle';
    support.lastThreadId = undefined;
    support.lastThreadShortId = undefined;

    await sendClientMenu(ctx, buildSupportUnavailableText());
    return true;
  }

  if (result.status === 'forwarded') {
    support.status = 'idle';
    support.lastThreadId = result.threadId;
    support.lastThreadShortId = undefined;

    if (result.threadId) {
      support.lastThreadShortId = await fetchSupportThreadShortId(result.threadId);
    }

    await sendClientMenu(ctx, buildSupportAcknowledgementText(support.lastThreadShortId));
    return true;
  }

  await ctx.reply(buildSupportRetryText());
  return true;
};

export const registerClientSupport = (bot: Telegraf<BotContext>): void => {
  bot.on('message', async (ctx, next) => {
    const handled = await handleSupportMessage(ctx);
    if (!handled && next) {
      await next();
    }
  });
};

export const __testing__ = {
  ensureSupportState,
  buildSupportPromptText,
  buildSupportAcknowledgementText,
  buildSupportUnavailableText,
  buildSupportRetryText,
  isBotCommandMessage,
  fetchSupportThreadShortId,
  handleSupportMessage,
};
