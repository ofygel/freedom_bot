import { Markup, Telegraf } from 'telegraf';

import { logger } from '../../../config';
import {
  EXECUTOR_VERIFICATION_PHOTO_COUNT,
  type BotContext,
  type ExecutorFlowState,
} from '../../types';
import { getExecutorRoleCopy } from './roleCopy';

export const EXECUTOR_VERIFICATION_ACTION = 'executor:verification:start';
export const EXECUTOR_SUBSCRIPTION_ACTION = 'executor:subscription:link';
export const EXECUTOR_MENU_ACTION = 'executor:menu:refresh';

const ensurePositiveRequirement = (value?: number): number => {
  if (!value || value <= 0) {
    return EXECUTOR_VERIFICATION_PHOTO_COUNT;
  }

  return value;
};

const createDefaultVerificationState = () => ({
  status: 'idle' as const,
  requiredPhotos: EXECUTOR_VERIFICATION_PHOTO_COUNT,
  uploadedPhotos: [],
  submittedAt: undefined as number | undefined,
  moderationThreadMessageId: undefined as number | undefined,
});

export const ensureExecutorState = (ctx: BotContext): ExecutorFlowState => {
  if (!ctx.session.executor) {
    ctx.session.executor = {
      role: 'courier',
      verification: createDefaultVerificationState(),
      subscription: {},
    } satisfies ExecutorFlowState;
  } else {
    if (!ctx.session.executor.role) {
      ctx.session.executor.role = 'courier';
    }
    ctx.session.executor.verification.requiredPhotos = ensurePositiveRequirement(
      ctx.session.executor.verification.requiredPhotos,
    );
  }

  return ctx.session.executor;
};

export const resetVerificationState = (state: ExecutorFlowState): void => {
  state.verification = {
    ...createDefaultVerificationState(),
    requiredPhotos: ensurePositiveRequirement(state.verification.requiredPhotos),
  };
};

const buildMenuKeyboard = () =>
  Markup.inlineKeyboard([
    [Markup.button.callback('üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã', EXECUTOR_VERIFICATION_ACTION)],
    [Markup.button.callback('üì® –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª', EXECUTOR_SUBSCRIPTION_ACTION)],
    [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é', EXECUTOR_MENU_ACTION)],
  ]);

const formatTimestamp = (timestamp: number): string => {
  return new Intl.DateTimeFormat('ru-RU', {
    dateStyle: 'short',
    timeStyle: 'short',
  }).format(new Date(timestamp));
};

const buildVerificationSection = (state: ExecutorFlowState): string[] => {
  const { verification } = state;
  const uploaded = verification.uploadedPhotos.length;
  const required = ensurePositiveRequirement(verification.requiredPhotos);

  const statusLabel = {
    idle: '–Ω–µ –Ω–∞—á–∞—Ç–∞',
    collecting: '–æ–∂–∏–¥–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏',
    submitted: '–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
  }[verification.status];

  const instructions = (() => {
    switch (verification.status) {
      case 'idle':
        return '–ù–∞–∂–º–∏—Ç–µ ¬´üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É.';
      case 'collecting':
        return '–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —ç—Ç–æ—Ç —á–∞—Ç.';
      case 'submitted':
        return '–ú—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.';
      default:
        return undefined;
    }
  })();

  const lines = [
    `–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏: ${statusLabel}.`,
    `–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: ${uploaded}/${required}.`,
  ];

  if (instructions) {
    lines.push(instructions);
  }

  return lines;
};

const buildSubscriptionSection = (state: ExecutorFlowState): string[] => {
  const { verification, subscription } = state;
  const copy = getExecutorRoleCopy(state.role);
  const channelLabel = `–∫–∞–Ω–∞–ª ${copy.pluralGenitive}`;

  if (verification.status !== 'submitted') {
    return [`–°—Å—ã–ª–∫–∞ –Ω–∞ ${channelLabel} —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.`];
  }

  if (subscription.lastInviteLink) {
    const issued = subscription.lastIssuedAt
      ? ` (–≤—ã–¥–∞–Ω–∞ ${formatTimestamp(subscription.lastIssuedAt)})`
      : '';
    return [
      `–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª —É–∂–µ –≤—ã–¥–∞–Ω–∞${issued}. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—É—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.`,
    ];
  }

  return [
    `–ü–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ ${channelLabel} –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.`,
  ];
};

const buildMenuText = (state: ExecutorFlowState): string => {
  const copy = getExecutorRoleCopy(state.role);
  const parts = [
    `${copy.emoji} –ú–µ–Ω—é ${copy.genitive} Freedom Bot`,
    '',
    ...buildVerificationSection(state),
    '',
    ...buildSubscriptionSection(state),
  ];

  return parts.join('\n');
};

export const showExecutorMenu = async (ctx: BotContext): Promise<void> => {
  if (!ctx.chat) {
    return;
  }

  const state = ensureExecutorState(ctx);
  const text = buildMenuText(state);
  const keyboard = buildMenuKeyboard();
  const chatId = ctx.chat.id;

  if (state.menuMessageId) {
    try {
      await ctx.telegram.editMessageText(chatId, state.menuMessageId, undefined, text, {
        reply_markup: keyboard.reply_markup,
      });
      return;
    } catch (error) {
      logger.debug(
        { err: error, chatId, messageId: state.menuMessageId },
        'Failed to update executor menu message, sending a new one',
      );
      state.menuMessageId = undefined;
    }
  }

  const message = await ctx.reply(text, keyboard);
  state.menuMessageId = message.message_id;
};

export const registerExecutorMenu = (bot: Telegraf<BotContext>): void => {
  bot.action(EXECUTOR_MENU_ACTION, async (ctx) => {
    if (ctx.chat?.type !== 'private') {
      await ctx.answerCbQuery('–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.');
      return;
    }

    await ctx.answerCbQuery();
    ensureExecutorState(ctx);
    await showExecutorMenu(ctx);
  });
};
