import type { Telegraf } from 'telegraf';

import { getChannelBinding } from '../../channels/bindings';
import { logger } from '../../../config';
import type { BotContext, ExecutorFlowState } from '../../types';
import {
  EXECUTOR_VERIFICATION_ACTION,
  ensureExecutorState,
  resetVerificationState,
  showExecutorMenu,
} from './menu';
import { getExecutorRoleCopy } from './roleCopy';

const VERIFICATION_PROMPT = [
  '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑–∞–º –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:',
  '1. –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ ‚Äî –ª–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞.',
  '2. –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ ‚Äî –æ–±—Ä–∞—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞.',
  '3. –°–µ–ª—Ñ–∏ —Å —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ–º –≤ —Ä—É–∫–∞—Ö.',
  '',
  '–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –≤ —ç—Ç–æ—Ç —á–∞—Ç.',
].join('\n');

const buildModerationSummary = (ctx: BotContext, state: ExecutorFlowState): string => {
  const user = ctx.session.user;
  const copy = getExecutorRoleCopy(state.role);
  const lines = [
    `üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é ${copy.genitive}.`,
    `Telegram ID: ${ctx.from?.id ?? '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`,
  ];

  if (user?.username) {
    lines.push(`Username: @${user.username}`);
  }

  const fullName = [user?.firstName, user?.lastName].filter(Boolean).join(' ').trim();
  if (fullName) {
    lines.push(`–ò–º—è: ${fullName}`);
  }

  if (ctx.session.phoneNumber) {
    lines.push(`–¢–µ–ª–µ—Ñ–æ–Ω: ${ctx.session.phoneNumber}`);
  }

  lines.push(
    `–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: ${state.verification.uploadedPhotos.length}/${state.verification.requiredPhotos}.`,
  );

  return lines.join('\n');
};

const submitForModeration = async (
  ctx: BotContext,
  state: ExecutorFlowState,
): Promise<boolean> => {
  const chatId = ctx.chat?.id;
  if (!chatId) {
    return false;
  }

  const verifyChannel = await getChannelBinding('verify');
  if (!verifyChannel) {
    const message = await ctx.reply('–ö–∞–Ω–∞–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    ctx.session.ephemeralMessages.push(message.message_id);
    return false;
  }

  try {
    const summary = buildModerationSummary(ctx, state);
    const summaryMessage = await ctx.telegram.sendMessage(verifyChannel.chatId, summary);
    state.verification.moderationThreadMessageId = summaryMessage.message_id;

    for (const photo of state.verification.uploadedPhotos) {
      try {
        await ctx.telegram.copyMessage(verifyChannel.chatId, chatId, photo.messageId);
      } catch (error) {
        logger.warn(
          {
            err: error,
            chatId: verifyChannel.chatId,
            userChatId: chatId,
            messageId: photo.messageId,
          },
          'Failed to copy verification photo to verification channel',
        );
      }
    }
  } catch (error) {
    logger.error(
      { err: error, chatId: verifyChannel.chatId, role: state.role },
      'Failed to submit executor verification to verification channel',
    );
    const message = await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    ctx.session.ephemeralMessages.push(message.message_id);
    return false;
  }

  state.verification.status = 'submitted';
  state.verification.submittedAt = Date.now();

  await ctx.reply(
    '–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –ø–µ—Ä–µ–¥–∞–ª–∏ –∏—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.',
  );

  return true;
};

const handleVerificationAction = async (ctx: BotContext): Promise<void> => {
  ensureExecutorState(ctx);
  const state = ctx.session.executor;

  if (state.verification.status === 'submitted') {
    const message = await ctx.reply('–ú—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.');
    ctx.session.ephemeralMessages.push(message.message_id);
    return;
  }

  resetVerificationState(state);
  state.verification.status = 'collecting';

  const prompt = await ctx.reply(VERIFICATION_PROMPT);
  ctx.session.ephemeralMessages.push(prompt.message_id);

  await showExecutorMenu(ctx);
};

const handleIncomingPhoto = async (ctx: BotContext): Promise<void> => {
  if (ctx.chat?.type !== 'private') {
    return;
  }

  const state = ensureExecutorState(ctx);
  const verification = state.verification;
  const copy = getExecutorRoleCopy(state.role);

  if (verification.status === 'submitted') {
    const message = await ctx.reply('–î–æ–∫—É–º–µ–Ω—Ç—ã —É–∂–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.');
    ctx.session.ephemeralMessages.push(message.message_id);
    return;
  }

  if (verification.status !== 'collecting') {
    const message = await ctx.reply(
      `–ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ –º–µ–Ω—é ${copy.genitive}, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã.`,
    );
    ctx.session.ephemeralMessages.push(message.message_id);
    return;
  }

  const message = ctx.message;
  if (!message || !('photo' in message) || !Array.isArray(message.photo) || message.photo.length === 0) {
    return;
  }

  const photoSizes = message.photo;
  const bestPhoto = photoSizes[photoSizes.length - 1];

  verification.uploadedPhotos.push({
    fileId: bestPhoto.file_id,
    messageId: message.message_id,
  });

  const uploaded = verification.uploadedPhotos.length;
  const required = verification.requiredPhotos;
  const info = await ctx.reply(`–§–æ—Ç–æ ${uploaded}/${required} –ø–æ–ª—É—á–µ–Ω–æ.`);
  ctx.session.ephemeralMessages.push(info.message_id);

  if (uploaded >= required) {
    await submitForModeration(ctx, state);
    await showExecutorMenu(ctx);
    return;
  }

  await showExecutorMenu(ctx);
};

const handleTextDuringCollection = async (ctx: BotContext, next: () => Promise<void>): Promise<void> => {
  if (ctx.chat?.type !== 'private') {
    await next();
    return;
  }

  const state = ensureExecutorState(ctx);
  if (state.verification.status !== 'collecting') {
    await next();
    return;
  }

  const telegramMessage = ctx.message;
  if (!telegramMessage || !('text' in telegramMessage)) {
    await next();
    return;
  }

  const text = telegramMessage.text;
  if (text.trim().startsWith('/')) {
    await next();
    return;
  }

  const reminder = await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞.');
  ctx.session.ephemeralMessages.push(reminder.message_id);
};

export const registerExecutorVerification = (bot: Telegraf<BotContext>): void => {
  bot.action(EXECUTOR_VERIFICATION_ACTION, async (ctx) => {
    if (ctx.chat?.type !== 'private') {
      await ctx.answerCbQuery('–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.');
      return;
    }

    await ctx.answerCbQuery();
    await handleVerificationAction(ctx);
  });

  bot.on('photo', async (ctx) => {
    await handleIncomingPhoto(ctx);
  });

  bot.on('text', async (ctx, next) => {
    await handleTextDuringCollection(ctx, next);
  });
};
