import type { Telegraf } from 'telegraf';

import { getChannelBinding } from '../../channels/bindings';
import { logger } from '../../../config';
import {
  EXECUTOR_VERIFICATION_PHOTO_COUNT,
  type BotContext,
  type ExecutorFlowState,
  type ExecutorRole,
} from '../../types';
import {
  EXECUTOR_MENU_ACTION,
  EXECUTOR_VERIFICATION_ACTION,
  ensureExecutorState,
  resetVerificationState,
  showExecutorMenu,
} from './menu';
import { getExecutorRoleCopy } from './roleCopy';
import { ui } from '../../ui';

const ROLE_PROMPTS: Record<ExecutorRole, string[]> = {
  courier: [
    `–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑–∞–º –∫—É—Ä—å–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ${EXECUTOR_VERIFICATION_PHOTO_COUNT} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:`,
    '1. –§–æ—Ç–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏ (–ª–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞).',
    '2. –°–µ–ª—Ñ–∏ —Å —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ–º –≤ —Ä—É–∫–∞—Ö.',
  ],
  driver: [
    `–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑–∞–º –≤–æ–¥–∏—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ${EXECUTOR_VERIFICATION_PHOTO_COUNT} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:`,
    '1. –§–æ—Ç–æ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è (–ª–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞).',
    '2. –°–µ–ª—Ñ–∏ —Å –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ–º –≤ —Ä—É–∫–∞—Ö.',
  ],
};

const buildVerificationPrompt = (role: ExecutorRole): string => {
  const lines = ROLE_PROMPTS[role] ?? ROLE_PROMPTS.courier;
  return [...lines, '', '–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –≤ —ç—Ç–æ—Ç —á–∞—Ç.'].join('\n');
};

const VERIFICATION_CHANNEL_MISSING_STEP_ID = 'executor:verification:channel-missing';
const VERIFICATION_SUBMISSION_FAILED_STEP_ID = 'executor:verification:submission-failed';
const VERIFICATION_SUBMITTED_STEP_ID = 'executor:verification:submitted';
const VERIFICATION_ALREADY_SUBMITTED_STEP_ID = 'executor:verification:already-submitted';
const VERIFICATION_PROMPT_STEP_ID = 'executor:verification:prompt';
const VERIFICATION_ALREADY_ON_REVIEW_STEP_ID = 'executor:verification:on-review';
const VERIFICATION_START_REMINDER_STEP_ID = 'executor:verification:start-reminder';
const VERIFICATION_PROGRESS_STEP_ID = 'executor:verification:progress';
const VERIFICATION_PHOTO_REMINDER_STEP_ID = 'executor:verification:photo-reminder';

const buildModerationSummary = (ctx: BotContext, state: ExecutorFlowState): string => {
  const user = ctx.session.user;
  const copy = getExecutorRoleCopy(state.role);
  const verification = state.verification[state.role];
  const lines = [
    `üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é ${copy.genitive}.`,
    `–†–æ–ª—å: ${copy.noun} (${state.role})`,
    `Telegram ID: ${ctx.from?.id ?? '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`,
  ];

  if (user?.username) {
    lines.push(`Username: @${user.username}`);
  }

  const fullName = [user?.firstName, user?.lastName].filter(Boolean).join(' ').trim();
  if (fullName) {
    lines.push(`–ò–º—è: ${fullName}`);
  }

  if (ctx.session.phoneNumber) {
    lines.push(`–¢–µ–ª–µ—Ñ–æ–Ω: ${ctx.session.phoneNumber}`);
  }

  lines.push(
    `–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: ${verification.uploadedPhotos.length}/${verification.requiredPhotos}.`,
  );

  return lines.join('\n');
};

const submitForModeration = async (
  ctx: BotContext,
  state: ExecutorFlowState,
): Promise<boolean> => {
  const chatId = ctx.chat?.id;
  if (!chatId) {
    return false;
  }

  const role = state.role;
  const verification = state.verification[role];

  const verifyChannel = await getChannelBinding('verify');
  if (!verifyChannel) {
    await ui.step(ctx, {
      id: VERIFICATION_CHANNEL_MISSING_STEP_ID,
      text: '–ö–∞–Ω–∞–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      cleanup: true,
      homeAction: EXECUTOR_MENU_ACTION,
    });
    return false;
  }

  try {
    const summary = buildModerationSummary(ctx, state);
    const summaryMessage = await ctx.telegram.sendMessage(verifyChannel.chatId, summary);
    verification.moderationThreadMessageId = summaryMessage.message_id;

    for (const photo of verification.uploadedPhotos) {
      try {
        await ctx.telegram.copyMessage(verifyChannel.chatId, chatId, photo.messageId);
      } catch (error) {
        logger.warn(
          {
            err: error,
            chatId: verifyChannel.chatId,
            userChatId: chatId,
            messageId: photo.messageId,
          },
          'Failed to copy verification photo to verification channel',
        );
      }
    }
  } catch (error) {
    logger.error(
      { err: error, chatId: verifyChannel.chatId, role },
      'Failed to submit executor verification to verification channel',
    );
    await ui.step(ctx, {
      id: VERIFICATION_SUBMISSION_FAILED_STEP_ID,
      text: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      cleanup: true,
      homeAction: EXECUTOR_MENU_ACTION,
    });
    return false;
  }

  verification.status = 'submitted';
  verification.submittedAt = Date.now();

  await ui.step(ctx, {
    id: VERIFICATION_SUBMITTED_STEP_ID,
    text: '–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –ø–µ—Ä–µ–¥–∞–ª–∏ –∏—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.',
    cleanup: true,
    homeAction: EXECUTOR_MENU_ACTION,
  });

  return true;
};

export const startExecutorVerification = async (
  ctx: BotContext,
): Promise<void> => {
  ensureExecutorState(ctx);
  const state = ctx.session.executor;
  const role = state.role;
  const verification = state.verification[role];

  if (verification.status === 'submitted') {
    await ui.step(ctx, {
      id: VERIFICATION_ALREADY_SUBMITTED_STEP_ID,
      text: '–ú—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.',
      cleanup: true,
      homeAction: EXECUTOR_MENU_ACTION,
    });
    return;
  }

  resetVerificationState(state);
  state.verification[role].status = 'collecting';

  const promptText = buildVerificationPrompt(role);
  await ui.step(ctx, {
    id: VERIFICATION_PROMPT_STEP_ID,
    text: promptText,
    cleanup: true,
    homeAction: EXECUTOR_MENU_ACTION,
  });

  await showExecutorMenu(ctx, { skipAccessCheck: true });
};

const handleIncomingPhoto = async (ctx: BotContext): Promise<void> => {
  if (ctx.chat?.type !== 'private') {
    return;
  }

  const state = ensureExecutorState(ctx);
  const role = state.role;
  const verification = state.verification[role];
  const copy = getExecutorRoleCopy(role);

  if (verification.status === 'submitted') {
    await ui.step(ctx, {
      id: VERIFICATION_ALREADY_ON_REVIEW_STEP_ID,
      text: '–î–æ–∫—É–º–µ–Ω—Ç—ã —É–∂–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.',
      cleanup: true,
      homeAction: EXECUTOR_MENU_ACTION,
    });
    return;
  }

  if (verification.status !== 'collecting') {
    await ui.step(ctx, {
      id: VERIFICATION_START_REMINDER_STEP_ID,
      text: `–ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ –º–µ–Ω—é ${copy.genitive}, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã.`,
      cleanup: true,
      homeAction: EXECUTOR_MENU_ACTION,
    });
    return;
  }

  const message = ctx.message;
  if (!message || !('photo' in message) || !Array.isArray(message.photo) || message.photo.length === 0) {
    return;
  }

  const photoSizes = message.photo;
  const bestPhoto = photoSizes[photoSizes.length - 1];

  verification.uploadedPhotos.push({
    fileId: bestPhoto.file_id,
    messageId: message.message_id,
  });

  const uploaded = verification.uploadedPhotos.length;
  const required = verification.requiredPhotos;
  await ui.step(ctx, {
    id: VERIFICATION_PROGRESS_STEP_ID,
    text: `–§–æ—Ç–æ ${uploaded}/${required} –ø–æ–ª—É—á–µ–Ω–æ.`,
    cleanup: true,
  });

  if (uploaded >= required) {
    await submitForModeration(ctx, state);
    await showExecutorMenu(ctx, { skipAccessCheck: true });
    return;
  }

  await showExecutorMenu(ctx, { skipAccessCheck: true });
};

const handleTextDuringCollection = async (ctx: BotContext, next: () => Promise<void>): Promise<void> => {
  if (ctx.chat?.type !== 'private') {
    await next();
    return;
  }

  const state = ensureExecutorState(ctx);
  const verification = state.verification[state.role];
  if (verification.status !== 'collecting') {
    await next();
    return;
  }

  const telegramMessage = ctx.message;
  if (!telegramMessage || !('text' in telegramMessage)) {
    await next();
    return;
  }

  const text = telegramMessage.text;
  if (text.trim().startsWith('/')) {
    await next();
    return;
  }

  await ui.step(ctx, {
    id: VERIFICATION_PHOTO_REMINDER_STEP_ID,
    text: '–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞.',
    cleanup: true,
  });
};

export const registerExecutorVerification = (bot: Telegraf<BotContext>): void => {
  bot.action(EXECUTOR_VERIFICATION_ACTION, async (ctx) => {
    if (ctx.chat?.type !== 'private') {
      await ctx.answerCbQuery('–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.');
      return;
    }

    await ctx.answerCbQuery();
    await startExecutorVerification(ctx);
  });

  bot.on('photo', async (ctx) => {
    await handleIncomingPhoto(ctx);
  });

  bot.on('text', async (ctx, next) => {
    await handleTextDuringCollection(ctx, next);
  });
};
