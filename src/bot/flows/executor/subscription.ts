import { Markup, Telegraf } from 'telegraf';
import type {
  Document,
  InlineKeyboardMarkup,
  Message,
  PhotoSize,
} from 'telegraf/typings/core/types/typegram';

import { config, logger } from '../../../config';
import type { BotContext, ExecutorRole } from '../../types';
import {
  EXECUTOR_MENU_ACTION,
  EXECUTOR_MENU_TEXT_LABELS,
  EXECUTOR_SUBSCRIPTION_ACTION,
  ensureExecutorState,
  isExecutorRoleVerified,
  showExecutorMenu,
} from './menu';
import { getExecutorRoleCopy } from '../../copy';
import { ui } from '../../ui';
import {
  SUBSCRIPTION_PERIOD_OPTIONS,
  findSubscriptionPeriodOption,
  formatSubscriptionAmount,
  type SubscriptionPeriodOption,
} from './subscriptionPlans';
import { createShortId } from '../../../utils/ids';
import { submitSubscriptionPaymentReview } from '../../moderation/paymentQueue';
import { failedPaymentsCounter } from '../../../metrics/business';
import { getChannelBinding } from '../../channels/bindings';
import {
  createTrialSubscription,
  TrialSubscriptionUnavailableError,
  type TrialSubscriptionErrorReason,
} from '../../../db/subscriptions';
import { resolveInviteLink, sendInviteLink } from './orders';
import {
  reportSubscriptionPaymentSubmitted,
  reportSubscriptionTrialActivated,
  type SubscriptionIdentity,
} from '../../services/reports';
import { getVerificationRoleGuidance } from './verification';

const SUBSCRIPTION_PERIOD_ACTION_PREFIX = 'executor:subscription:period';
const SUBSCRIPTION_VERIFICATION_REQUIRED_STEP_ID =
  'executor:subscription:verification-required';
const SUBSCRIPTION_CONFIRMATION_STEP_ID = 'executor:subscription:confirmation';
const SUBSCRIPTION_RECEIPT_ACCEPTED_STEP_ID = 'executor:subscription:receipt-accepted';
const SUBSCRIPTION_RECEIPT_FAILED_STEP_ID = 'executor:subscription:receipt-failed';
const SUBSCRIPTION_SELECT_PERIOD_REMINDER_STEP_ID = 'executor:subscription:select-period';
const SUBSCRIPTION_RECEIPT_REMINDER_STEP_ID = 'executor:subscription:receipt-reminder';
const SUBSCRIPTION_TRIAL_ACTION = 'executor:subscription:trial';
const SUBSCRIPTION_TRIAL_UNAVAILABLE_STEP_ID = 'executor:subscription:trial-unavailable';
const SUBSCRIPTION_TRIAL_ERROR_STEP_ID = 'executor:subscription:trial-error';

const buildVerificationRequiredMessage = (role: ExecutorRole): string => {
  const guidance = getVerificationRoleGuidance(role);
  const prompt = guidance.nextStepsPrompt.replace(/^üì∏\s*/, '');
  const sanitizedPrompt = prompt.replace(/\.$/, '');
  return `–í—ã –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—é. ${sanitizedPrompt}, —á—Ç–æ–±—ã –º—ã –≤—ã–¥–∞–ª–∏ –¥–æ—Å—Ç—É–ø.`;
};

const formatKaspiDetails = (): string[] => [
  '–û–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ Kaspi –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:',
  `–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${config.subscriptions.payment.kaspi.name}`,
  `Kaspi Gold: ${config.subscriptions.payment.kaspi.card}`,
  `–¢–µ–ª–µ—Ñ–æ–Ω: ${config.subscriptions.payment.kaspi.phone}`,
  '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –ü–æ–¥–ø–∏—Å–∫–∞',
];

const buildPeriodKeyboard = (trialEnabled: boolean): InlineKeyboardMarkup => {
  const rows = SUBSCRIPTION_PERIOD_OPTIONS.map((option) => [
    Markup.button.callback(
      `${option.label} ‚Äî ${formatSubscriptionAmount(option.amount, option.currency)}`,
      `${SUBSCRIPTION_PERIOD_ACTION_PREFIX}:${option.id}`,
    ),
  ]);

  if (trialEnabled) {
    rows.push([Markup.button.callback('–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥', SUBSCRIPTION_TRIAL_ACTION)]);
  }

  return Markup.inlineKeyboard(rows).reply_markup;
};

const buildSelectionText = (
  roleCopy: ReturnType<typeof getExecutorRoleCopy>,
  { trialEnabled }: { trialEnabled: boolean },
): string => {
  const lines = [
    `${roleCopy.emoji} –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è ${roleCopy.genitive}`,
    '',
    '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç.',
    ...SUBSCRIPTION_PERIOD_OPTIONS.map(
      (option) => `‚Ä¢ ${option.label} ‚Äî ${formatSubscriptionAmount(option.amount, option.currency)}`,
    ),
    '',
    ...formatKaspiDetails(),
    '',
    '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ —ç—Ç–æ—Ç —á–∞—Ç, –º—ã –ø—Ä–æ–≤–µ—Ä–∏–º –µ–≥–æ –∏ –ø—Ä–∏—à–ª—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª.',
  ];

  if (trialEnabled) {
    lines.push(
      '',
      '–¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø.',
    );
  }

  return lines.join('\n');
};

const buildTrialUnavailableMessage = (
  reason: TrialSubscriptionErrorReason,
): string => {
  switch (reason) {
    case 'already_used':
      return '–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–æ—Å—Ç—É–ø.';
    case 'active':
    default:
      return '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞. –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—É—é —á–µ—Ä–µ–∑ –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.';
  }
};

const notifyTrialUnavailable = async (
  ctx: BotContext,
  reason: TrialSubscriptionErrorReason,
): Promise<void> => {
  await ui.step(ctx, {
    id: SUBSCRIPTION_TRIAL_UNAVAILABLE_STEP_ID,
    text: buildTrialUnavailableMessage(reason),
    cleanup: true,
    homeAction: EXECUTOR_MENU_ACTION,
  });
};

const notifyTrialFailure = async (ctx: BotContext): Promise<void> => {
  await ui.step(ctx, {
    id: SUBSCRIPTION_TRIAL_ERROR_STEP_ID,
    text: '–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ –º–µ–Ω—é.',
    cleanup: true,
    homeAction: EXECUTOR_MENU_ACTION,
  });
};

const activateTrialSubscription = async (ctx: BotContext): Promise<void> => {
  const state = ensureExecutorState(ctx);
  const role = state.role;
  if (!role) {
    await ctx.answerCbQuery();
    return;
  }

  if (!config.features.trialEnabled) {
    await ctx.answerCbQuery('–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
    return;
  }

  const isVerified = isExecutorRoleVerified(ctx, role);
  if (!isVerified) {
    state.subscription.status = 'idle';
    state.subscription.selectedPeriodId = undefined;
    state.subscription.pendingPaymentId = undefined;
    const verificationRequiredMessage = buildVerificationRequiredMessage(role);
    await ctx.answerCbQuery(verificationRequiredMessage);
    await ui.step(ctx, {
      id: SUBSCRIPTION_VERIFICATION_REQUIRED_STEP_ID,
      text: verificationRequiredMessage,
      cleanup: true,
      homeAction: EXECUTOR_MENU_ACTION,
    });
    return;
  }

  const binding = await getChannelBinding('drivers');
  if (!binding) {
    logger.error(
      { telegramId: ctx.auth.user.telegramId },
      'Drivers channel binding missing during trial activation',
    );
    await ctx.answerCbQuery('–ö–∞–Ω–∞–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
    await notifyTrialFailure(ctx);
    return;
  }

  await ctx.answerCbQuery('–ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥‚Ä¶');

  const subscriptionState = state.subscription;
  subscriptionState.status = 'idle';
  subscriptionState.selectedPeriodId = undefined;
  subscriptionState.pendingPaymentId = undefined;

  try {
    const trial = await createTrialSubscription({
      telegramId: ctx.auth.user.telegramId,
      username: ctx.auth.user.username ?? undefined,
      firstName: ctx.auth.user.firstName ?? undefined,
      lastName: ctx.auth.user.lastName ?? undefined,
      phone: ctx.auth.user.phone ?? ctx.session.phoneNumber ?? undefined,
      role,
      chatId: binding.chatId,
      trialDays: config.subscriptions.trialDays,
      currency: config.subscriptions.prices.currency,
    });

    ctx.auth.executor.hasActiveSubscription = true;
    subscriptionState.moderationChatId = undefined;
    subscriptionState.moderationMessageId = undefined;

    const subscriber: SubscriptionIdentity = {
      telegramId: ctx.auth.user.telegramId,
      username: ctx.auth.user.username ?? undefined,
      firstName: ctx.auth.user.firstName ?? undefined,
      lastName: ctx.auth.user.lastName ?? undefined,
      phone: ctx.auth.user.phone ?? ctx.session.phoneNumber ?? undefined,
      shortId: trial.subscriptionId ? String(trial.subscriptionId) : undefined,
    };

    await reportSubscriptionTrialActivated(ctx.telegram, subscriber, trial.expiresAt);

    const resolution = await resolveInviteLink(ctx, state);
    if (!resolution.link) {
      logger.error(
        { telegramId: ctx.auth.user.telegramId },
        'Failed to resolve invite link after trial activation',
      );
      await notifyTrialFailure(ctx);
      await showExecutorMenu(ctx, { skipAccessCheck: true });
      return;
    }

    subscriptionState.lastInviteLink = resolution.link;
    subscriptionState.lastIssuedAt = Date.now();

    logger.info(
      {
        telegramId: ctx.auth.user.telegramId,
        subscriptionId: trial.subscriptionId,
        expiresAt: trial.expiresAt.toISOString(),
      },
      'Trial subscription activated',
    );

    await sendInviteLink(ctx, state, resolution.link, resolution.expiresAt);
    await showExecutorMenu(ctx, { skipAccessCheck: true });
  } catch (error) {
    if (error instanceof TrialSubscriptionUnavailableError) {
      if (error.reason === 'active') {
        ctx.auth.executor.hasActiveSubscription = true;
      }

      await notifyTrialUnavailable(ctx, error.reason);
      await showExecutorMenu(ctx, { skipAccessCheck: true });
      return;
    }

    logger.error(
      { err: error, telegramId: ctx.auth.user.telegramId },
      'Failed to activate trial subscription',
    );
    await notifyTrialFailure(ctx);
    await showExecutorMenu(ctx, { skipAccessCheck: true });
  }
};

export interface StartExecutorSubscriptionOptions {
  skipVerificationCheck?: boolean;
}

export const startExecutorSubscription = async (
  ctx: BotContext,
  options: StartExecutorSubscriptionOptions = {},
): Promise<void> => {
  const state = ensureExecutorState(ctx);
  const role = state.role;
  if (!role) {
    return;
  }
  const copy = getExecutorRoleCopy(role);

  const isVerified = isExecutorRoleVerified(ctx, role);

  if (!options.skipVerificationCheck && !isVerified) {
    state.subscription.status = 'idle';
    state.subscription.selectedPeriodId = undefined;
    state.subscription.pendingPaymentId = undefined;
    const verificationRequiredMessage = buildVerificationRequiredMessage(role);
    await ui.step(ctx, {
      id: SUBSCRIPTION_VERIFICATION_REQUIRED_STEP_ID,
      text: verificationRequiredMessage,
      cleanup: true,
      homeAction: EXECUTOR_MENU_ACTION,
    });
    return;
  }

  state.subscription.status = 'selectingPeriod';
  state.subscription.selectedPeriodId = undefined;
  state.subscription.pendingPaymentId = undefined;

  const trialEnabled = config.features.trialEnabled;
  const keyboard = buildPeriodKeyboard(trialEnabled);
  const text = buildSelectionText(copy, { trialEnabled });

  await ui.step(ctx, {
    id: 'executor:subscription:step',
    text,
    keyboard,
    homeAction: EXECUTOR_MENU_ACTION,
  });
};

const buildPeriodConfirmationMessage = (
  period: SubscriptionPeriodOption,
  roleCopy: ReturnType<typeof getExecutorRoleCopy>,
): string => {
  const lines = [
    `–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ ${period.label} –¥–ª—è ${roleCopy.genitive}.`,
    `–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${formatSubscriptionAmount(period.amount, period.currency)}.`,
    '',
    ...formatKaspiDetails(),
    '',
    '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –º—ã –ø—Ä–∏—à–ª—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª.',
  ];

  return lines.join('\n');
};

const handlePeriodSelection = async (
  ctx: BotContext,
  periodId: string,
): Promise<void> => {
  const period = findSubscriptionPeriodOption(periodId);
  if (!period) {
    await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏.');
    return;
  }

  const state = ensureExecutorState(ctx);
  const role = state.role;
  if (!role) {
    await ctx.answerCbQuery();
    return;
  }
  const isVerified = isExecutorRoleVerified(ctx, role);

  if (!isVerified) {
    state.subscription.status = 'idle';
    state.subscription.selectedPeriodId = undefined;
    state.subscription.pendingPaymentId = undefined;
    const verificationRequiredMessage = buildVerificationRequiredMessage(role);
    await ctx.answerCbQuery(verificationRequiredMessage);
    await ui.step(ctx, {
      id: SUBSCRIPTION_VERIFICATION_REQUIRED_STEP_ID,
      text: verificationRequiredMessage,
      cleanup: true,
      homeAction: EXECUTOR_MENU_ACTION,
    });
    return;
  }

  state.subscription.status = 'awaitingReceipt';
  state.subscription.selectedPeriodId = period.id;
  state.subscription.pendingPaymentId = undefined;

  await ctx.answerCbQuery(`–ü–µ—Ä–∏–æ–¥: ${period.label}`);

  const copy = getExecutorRoleCopy(role);
  await ui.step(ctx, {
    id: SUBSCRIPTION_CONFIRMATION_STEP_ID,
    text: buildPeriodConfirmationMessage(period, copy),
    cleanup: true,
    homeAction: EXECUTOR_MENU_ACTION,
  });

  await showExecutorMenu(ctx, { skipAccessCheck: true });
};

interface ReceiptPayload {
  type: 'photo' | 'document';
  fileId: string;
}

const extractReceipt = (message: Message): ReceiptPayload | null => {
  if ('photo' in message && Array.isArray(message.photo) && message.photo.length > 0) {
    const photoSizes = message.photo as PhotoSize[];
    const bestPhoto = photoSizes[photoSizes.length - 1];
    return { type: 'photo', fileId: bestPhoto.file_id } satisfies ReceiptPayload;
  }

  if ('document' in message && message.document) {
    const document = message.document as Document;
    return { type: 'document', fileId: document.file_id } satisfies ReceiptPayload;
  }

  return null;
};

const notifyReceiptAccepted = async (ctx: BotContext): Promise<void> => {
  await ui.step(ctx, {
    id: SUBSCRIPTION_RECEIPT_ACCEPTED_STEP_ID,
    text: '–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–µ—Ä–µ–¥–∞–ª–∏ —á–µ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è, –∏ –º—ã –ø—Ä–∏—à–ª—ë–º —Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.',
    cleanup: true,
    homeAction: EXECUTOR_MENU_ACTION,
  });
};

const notifyReceiptFailed = async (ctx: BotContext): Promise<void> => {
  await ui.step(ctx, {
    id: SUBSCRIPTION_RECEIPT_FAILED_STEP_ID,
    text: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
    cleanup: true,
    homeAction: EXECUTOR_MENU_ACTION,
  });
};

const buildPaymentId = (): string => `manual-${Date.now()}-${createShortId({ length: 6 })}`;

const handleReceiptUpload = async (ctx: BotContext): Promise<boolean> => {
  if (ctx.chat?.type !== 'private') {
    return false;
  }

  const message = ctx.message;
  if (!message) {
    return false;
  }

  const state = ensureExecutorState(ctx);
  const role = state.role;
  if (!role) {
    return false;
  }
  const subscription = state.subscription;

  if (subscription.status !== 'awaitingReceipt') {
    return false;
  }

  const period = findSubscriptionPeriodOption(subscription.selectedPeriodId);
  if (!period) {
    await ui.step(ctx, {
      id: SUBSCRIPTION_SELECT_PERIOD_REMINDER_STEP_ID,
      text: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é.',
      cleanup: true,
      homeAction: EXECUTOR_MENU_ACTION,
    });
    return true;
  }

  const receipt = extractReceipt(message);
  if (!receipt) {
    await ui.step(ctx, {
      id: SUBSCRIPTION_RECEIPT_REMINDER_STEP_ID,
      text: '–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ —Ñ–∞–π–ª —Å —á–µ–∫–æ–º.',
      cleanup: true,
      homeAction: EXECUTOR_MENU_ACTION,
    });
    return true;
  }

  const paymentId = buildPaymentId();
  subscription.pendingPaymentId = paymentId;
  const submittedAt = new Date();

  try {
    const result = await submitSubscriptionPaymentReview(ctx.telegram, {
      paymentId,
      period,
      submittedAt,
      executor: {
        role,
        telegramId: ctx.auth.user.telegramId,
        chatId: ctx.chat.id,
        username: ctx.auth.user.username ?? undefined,
        firstName: ctx.auth.user.firstName ?? undefined,
        lastName: ctx.auth.user.lastName ?? undefined,
        phone: ctx.auth.user.phone ?? ctx.session.phoneNumber ?? undefined,
      },
      receipt: {
        chatId: ctx.chat.id,
        messageId: message.message_id,
        fileId: receipt.fileId,
        type: receipt.type,
      },
    });

    if (result.status === 'missing_channel') {
      subscription.status = 'awaitingReceipt';
      subscription.pendingPaymentId = undefined;
      await notifyReceiptFailed(ctx);
      return true;
    }

    if (result.status === 'published') {
      const payer: SubscriptionIdentity = {
        telegramId: ctx.auth.user.telegramId,
        username: ctx.auth.user.username ?? undefined,
        firstName: ctx.auth.user.firstName ?? undefined,
        lastName: ctx.auth.user.lastName ?? undefined,
        phone: ctx.auth.user.phone ?? ctx.session.phoneNumber ?? undefined,
      };

      await reportSubscriptionPaymentSubmitted(
        ctx.telegram,
        payer,
        period.label,
        { value: period.amount, currency: period.currency },
        submittedAt,
      );
    }

    subscription.status = 'pendingModeration';
    subscription.moderationChatId = result.chatId;
    subscription.moderationMessageId = result.messageId;

    await notifyReceiptAccepted(ctx);
    await showExecutorMenu(ctx, { skipAccessCheck: true });
    return true;
  } catch (error) {
    failedPaymentsCounter.inc();
    logger.error(
      { err: error, paymentId, telegramId: ctx.auth.user.telegramId },
      'Failed to submit subscription payment for moderation',
    );
    subscription.status = 'awaitingReceipt';
    subscription.pendingPaymentId = undefined;
    await notifyReceiptFailed(ctx);
    return true;
  }
};

export const registerExecutorSubscription = (bot: Telegraf<BotContext>): void => {
  bot.action(EXECUTOR_SUBSCRIPTION_ACTION, async (ctx) => {
    if (ctx.chat?.type !== 'private') {
      await ctx.answerCbQuery('–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.');
      return;
    }

    await ctx.answerCbQuery();
    await startExecutorSubscription(ctx);
  });

  bot.hears(EXECUTOR_MENU_TEXT_LABELS.subscription, async (ctx) => {
    if (ctx.chat?.type !== 'private') {
      return;
    }

    ensureExecutorState(ctx);
    await startExecutorSubscription(ctx);
  });

  const periodPattern = new RegExp(`^${SUBSCRIPTION_PERIOD_ACTION_PREFIX}:(\\d+)$`);
  bot.action(periodPattern, async (ctx) => {
    if (ctx.chat?.type !== 'private') {
      await ctx.answerCbQuery('–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.');
      return;
    }

    const match = ctx.match as RegExpMatchArray | undefined;
    const periodId = match?.[1];
    if (!periodId) {
      await ctx.answerCbQuery('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.');
      return;
    }

    await handlePeriodSelection(ctx, periodId);
  });

  bot.action(SUBSCRIPTION_TRIAL_ACTION, async (ctx) => {
    if (ctx.chat?.type !== 'private') {
      await ctx.answerCbQuery('–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.');
      return;
    }

    await activateTrialSubscription(ctx);
  });

  bot.on('photo', async (ctx, next) => {
    const handled = await handleReceiptUpload(ctx);
    if (!handled) {
      await next();
    }
  });

  bot.on('document', async (ctx, next) => {
    const handled = await handleReceiptUpload(ctx);
    if (!handled) {
      await next();
    }
  });
};
