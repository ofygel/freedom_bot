import { Telegraf } from 'telegraf';
import type { Message, MessageEntity } from 'telegraf/typings/core/types/typegram';

import { logger } from '../../../config';
import { pool } from '../../../db';
import { forwardSupportMessage } from '../../services/support';
import { ui } from '../../ui';
import type { BotContext } from '../../types';
import {
  EXECUTOR_MENU_ACTION,
  EXECUTOR_MENU_TEXT_LABELS,
  EXECUTOR_SUPPORT_ACTION,
} from './menu';

const SUPPORT_CONTACT_STEP_ID = 'executor:support:contact';

interface SupportThreadSummary {
  id: string;
  shortId?: string;
}

const ensureSupportState = (ctx: BotContext) => {
  if (!ctx.session.support) {
    ctx.session.support = { status: 'idle' };
  }

  return ctx.session.support;
};

const buildSupportPromptText = (): string =>
  [
    'üÜò –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.',
    '',
    '–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.',
    '–ú—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –∏ –≤–µ—Ä–Ω—ë–º—Å—è —Å –æ—Ç–≤–µ—Ç–æ–º –≤ —ç—Ç–æ—Ç —á–∞—Ç.',
  ].join('\n');

const buildSupportAcknowledgementText = (shortId?: string): string => {
  const lines = [
    '‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
    '–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ ‚Äî –º—ã –Ω–∞–ø–∏—à–µ–º –≤–∞–º –≤ —ç—Ç–æ—Ç —á–∞—Ç.',
  ];

  if (shortId) {
    lines.splice(1, 0, `–ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: ${shortId}.`);
  }

  return lines.join('\n');
};

const buildSupportOpenThreadText = (shortId?: string): string => {
  const lines = [
    '‚ÑπÔ∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
    '–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞. –ú—ã —Å–æ–æ–±—â–∏–º –æ —Ä–µ—à–µ–Ω–∏–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.',
  ];

  if (shortId) {
    lines.splice(1, 0, `–ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: ${shortId}.`);
  }

  return lines.join('\n');
};

const buildSupportUnavailableText = (): string =>
  [
    '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
    '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–¥–Ω–µ–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º.',
  ].join('\n');

const buildSupportRetryText = (): string =>
  [
    '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏.',
    '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.',
  ].join('\n');

const fetchSupportThreadShortId = async (
  threadId: string,
): Promise<string | undefined> => {
  try {
    const result = await pool.query<{ short_id: string }>(
      `
        SELECT short_id
        FROM support_threads
        WHERE id = $1
      `,
      [threadId],
    );

    return result.rows[0]?.short_id ?? undefined;
  } catch (error) {
    logger.error(
      { err: error, threadId },
      'Failed to fetch short id for support thread',
    );
    return undefined;
  }
};

const findOpenSupportThread = async (
  chatId: number,
): Promise<SupportThreadSummary | null> => {
  try {
    const result = await pool.query<{ id: string; short_id: string }>(
      `
        SELECT id, short_id
        FROM support_threads
        WHERE user_chat_id = $1
          AND status = 'open'
        ORDER BY created_at DESC
        LIMIT 1
      `,
      [chatId],
    );

    if (result.rows.length === 0) {
      return null;
    }

    const row = result.rows[0];
    return { id: row.id, shortId: row.short_id } satisfies SupportThreadSummary;
  } catch (error) {
    logger.error(
      { err: error, chatId },
      'Failed to find open support thread for chat',
    );
    return null;
  }
};

const isBotCommandMessage = (message: Message): boolean => {
  const textEntitySource = message as Partial<Message.TextMessage>;
  const captionEntitySource = message as Partial<{ caption?: string; caption_entities?: MessageEntity[] }>;

  const entities = textEntitySource.entities ?? captionEntitySource.caption_entities;
  if (entities?.some((entity) => entity.type === 'bot_command' && entity.offset === 0)) {
    return true;
  }

  const text = textEntitySource.text ?? captionEntitySource.caption;
  return typeof text === 'string' && text.startsWith('/');
};

const handleSupportPrompt = async (
  ctx: BotContext,
  source: 'callback' | 'text',
): Promise<void> => {
  const support = ensureSupportState(ctx);

  if (ctx.chat?.type !== 'private') {
    if (source === 'callback') {
      await ctx.answerCbQuery('–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.');
    }
    return;
  }

  const respond = async (text?: string): Promise<void> => {
    if (source === 'callback') {
      await ctx.answerCbQuery(text);
    } else if (text) {
      await ctx.reply(text);
    }
  };

  if (support.status === 'awaiting_message') {
    await respond('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.');
    await ui.step(ctx, {
      id: SUPPORT_CONTACT_STEP_ID,
      text: buildSupportPromptText(),
      homeAction: EXECUTOR_MENU_ACTION,
    });
    return;
  }

  const chatId = ctx.chat.id;
  const existing = await findOpenSupportThread(chatId);

  if (existing) {
    support.status = 'idle';
    support.lastThreadId = existing.id;
    support.lastThreadShortId = existing.shortId;

    await respond('–û–±—Ä–∞—â–µ–Ω–∏–µ —É–∂–µ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.');
    await ui.step(ctx, {
      id: SUPPORT_CONTACT_STEP_ID,
      text: buildSupportOpenThreadText(existing.shortId),
      homeAction: EXECUTOR_MENU_ACTION,
    });
    return;
  }

  support.status = 'awaiting_message';
  support.lastThreadId = undefined;
  support.lastThreadShortId = undefined;

  await respond('–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.');
  await ui.step(ctx, {
    id: SUPPORT_CONTACT_STEP_ID,
    text: buildSupportPromptText(),
    homeAction: EXECUTOR_MENU_ACTION,
  });
};

const handleSupportMessage = async (
  ctx: BotContext,
): Promise<boolean> => {
  const support = ensureSupportState(ctx);

  if (ctx.chat?.type !== 'private') {
    return false;
  }

  if (support.status !== 'awaiting_message') {
    return false;
  }

  const message = ctx.message as Message | undefined;
  if (!message) {
    return false;
  }

  if (isBotCommandMessage(message)) {
    support.status = 'idle';
    return false;
  }

  const result = await forwardSupportMessage(ctx);

  if (result.status === 'missing_channel') {
    support.status = 'idle';
    support.lastThreadId = undefined;
    support.lastThreadShortId = undefined;

    await ui.step(ctx, {
      id: SUPPORT_CONTACT_STEP_ID,
      text: buildSupportUnavailableText(),
      homeAction: EXECUTOR_MENU_ACTION,
    });
    return true;
  }

  if (result.status === 'forwarded') {
    support.status = 'idle';
    support.lastThreadId = result.threadId;
    support.lastThreadShortId = undefined;

    if (result.threadId) {
      support.lastThreadShortId = await fetchSupportThreadShortId(result.threadId);
    }

    await ui.step(ctx, {
      id: SUPPORT_CONTACT_STEP_ID,
      text: buildSupportAcknowledgementText(support.lastThreadShortId),
      homeAction: EXECUTOR_MENU_ACTION,
    });
    return true;
  }

  await ui.step(ctx, {
    id: SUPPORT_CONTACT_STEP_ID,
    text: buildSupportRetryText(),
    homeAction: EXECUTOR_MENU_ACTION,
  });

  return true;
};

export const registerExecutorSupport = (bot: Telegraf<BotContext>): void => {
  bot.action(EXECUTOR_SUPPORT_ACTION, async (ctx) => {
    await handleSupportPrompt(ctx, 'callback');
  });

  bot.command('support', async (ctx) => {
    if (ctx.chat?.type !== 'private') {
      return;
    }

    await handleSupportPrompt(ctx, 'text');
  });

  bot.on('message', async (ctx, next) => {
    const handled = await handleSupportMessage(ctx);
    if (!handled && next) {
      await next();
    }
  });

  bot.hears(EXECUTOR_MENU_TEXT_LABELS.support, async (ctx) => {
    if (ctx.chat?.type !== 'private') {
      return;
    }

    await handleSupportPrompt(ctx, 'text');
  });
};

export const __testing__ = {
  SUPPORT_CONTACT_STEP_ID,
  buildSupportPromptText,
  buildSupportAcknowledgementText,
  buildSupportOpenThreadText,
  buildSupportUnavailableText,
  buildSupportRetryText,
  handleSupportPrompt,
  handleSupportMessage,
  findOpenSupportThread,
  fetchSupportThreadShortId,
  ensureSupportState,
  isBotCommandMessage,
};
