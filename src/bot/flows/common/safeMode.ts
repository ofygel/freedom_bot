import type { Telegraf } from 'telegraf';

import type { BotContext } from '../../types';
import { ui } from '../../ui';
import { buildInlineKeyboard } from '../../keyboards/common';
import { askCity } from './citySelect';
import { promptClientSupport } from '../client/support';

export const SAFE_MODE_CARD_STEP_ID = 'common:safe-mode:card';

const SAFE_MODE_PROFILE_ACTION = 'safe-mode:profile';
const SAFE_MODE_CITY_ACTION = 'safe-mode:city';
const SAFE_MODE_SUPPORT_ACTION = 'safe-mode:support';

const SAFE_MODE_ACTIONS = {
  profile: SAFE_MODE_PROFILE_ACTION,
  city: SAFE_MODE_CITY_ACTION,
  support: SAFE_MODE_SUPPORT_ACTION,
} as const;

const buildSafeModeKeyboard = () =>
  buildInlineKeyboard([
    [
      { label: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', action: SAFE_MODE_PROFILE_ACTION },
      { label: 'üèôÔ∏è –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥', action: SAFE_MODE_CITY_ACTION },
    ],
    [{ label: 'üÜò –ü–æ–º–æ—â—å', action: SAFE_MODE_SUPPORT_ACTION }],
  ]);

const buildSafeModeCardText = (prompt?: string): string => {
  const lines = [
    '‚ö†Ô∏è Freedom Bot —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ä–µ–∂–∏–º–µ ‚Äî —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.',
    prompt ?? '–ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∏–∂–µ:',
    '',
    '‚Ä¢ üë§ –ü—Ä–æ—Ñ–∏–ª—å ‚Äî –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞.',
    '‚Ä¢ üèôÔ∏è –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ ‚Äî —É—Ç–æ—á–Ω–∏—Ç–µ —Ä–∞–±–æ—á–∏–π –≥–æ—Ä–æ–¥.',
    '‚Ä¢ üÜò –ü–æ–º–æ—â—å ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.',
  ];

  return lines.join('\n');
};

const buildProfileSummary = (ctx: BotContext): string => {
  const authUser = ctx.auth?.user;
  const lines = ['üë§ –ü—Ä–æ—Ñ–∏–ª—å', ''];

  if (!authUser) {
    lines.push('–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.');
    return lines.join('\n');
  }

  const phoneLabel = authUser.phone
    ? `${authUser.phone}${authUser.phoneVerified ? ' (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω)' : ' (–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω)'}`
    : '‚Äî';

  lines.push(`ID: ${authUser.telegramId}`);
  lines.push(`–ò–º—è: ${authUser.firstName ?? '‚Äî'} ${authUser.lastName ?? ''}`.trim());
  lines.push(`–õ–æ–≥–∏–Ω: ${authUser.username ? `@${authUser.username}` : '‚Äî'}`);
  lines.push(`–†–æ–ª—å: ${authUser.role}`);
  lines.push(`–°—Ç–∞—Ç—É—Å: ${authUser.status}`);
  lines.push(`–¢–µ–ª–µ—Ñ–æ–Ω: ${phoneLabel}`);
  lines.push(`–ì–æ—Ä–æ–¥: ${authUser.citySelected ?? '‚Äî'}`);

  return lines.join('\n');
};

export const isSafeModeSession = (ctx: BotContext): boolean =>
  ctx.session.safeMode === true || ctx.auth?.user.status === 'safe_mode';

export const showSafeModeCard = async (
  ctx: BotContext,
  options: { prompt?: string } = {},
): Promise<void> => {
  const chatId = ctx.chat?.id;
  if (!chatId) {
    return;
  }

  await ui.step(ctx, {
    id: SAFE_MODE_CARD_STEP_ID,
    text: buildSafeModeCardText(options.prompt),
    keyboard: buildSafeModeKeyboard(),
    cleanup: false,
  });
};

export const registerSafeModeActions = (bot: Telegraf<BotContext>): void => {
  bot.action(SAFE_MODE_PROFILE_ACTION, async (ctx) => {
    try {
      await ctx.answerCbQuery();
    } catch {
      // Ignore answer errors
    }

    if (ctx.chat?.type !== 'private') {
      if (ctx.chat) {
        try {
          await ctx.reply('–ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ.');
        } catch {
          // Ignore
        }
      }
      return;
    }

    await ctx.reply(buildProfileSummary(ctx));
  });

  bot.action(SAFE_MODE_CITY_ACTION, async (ctx) => {
    if (ctx.chat?.type !== 'private') {
      try {
        await ctx.answerCbQuery('–°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ.');
      } catch {
        // Ignore
      }
      return;
    }

    try {
      await ctx.answerCbQuery();
    } catch {
      // Ignore
    }

    await askCity(ctx, '–°–º–µ–Ω–∏—Ç–µ –≥–æ—Ä–æ–¥:');
  });

  bot.action(SAFE_MODE_SUPPORT_ACTION, async (ctx) => {
    if (ctx.chat?.type !== 'private') {
      try {
        await ctx.answerCbQuery('–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–∑ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞.');
      } catch {
        // Ignore
      }
      return;
    }

    try {
      await ctx.answerCbQuery();
    } catch {
      // Ignore
    }

    await promptClientSupport(ctx);
  });
};

export const __testing__ = {
  buildSafeModeCardText,
  buildProfileSummary,
  SAFE_MODE_ACTIONS,
};
