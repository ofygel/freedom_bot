import type { Telegraf } from 'telegraf';

import type { BotContext } from '../../types';
import { SAFE_MODE_CARD_ACTIONS, buildSafeModeCardText } from '../../ui/safeModeCard';
import { askCity } from './citySelect';
import { promptClientSupport } from '../client/support';

const SAFE_MODE_PROFILE_ACTION = SAFE_MODE_CARD_ACTIONS.profile;
const SAFE_MODE_CITY_ACTION = SAFE_MODE_CARD_ACTIONS.city;
const SAFE_MODE_SUPPORT_ACTION = SAFE_MODE_CARD_ACTIONS.support;

const buildProfileSummary = (ctx: BotContext): string => {
  const authUser = ctx.auth?.user;
  const lines = ['üë§ –ü—Ä–æ—Ñ–∏–ª—å', ''];

  if (!authUser) {
    lines.push('–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.');
    return lines.join('\n');
  }

  const phoneLabel = authUser.phone
    ? `${authUser.phone}${authUser.phoneVerified ? ' (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω)' : ' (–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω)'}`
    : '‚Äî';

  lines.push(`ID: ${authUser.telegramId}`);
  lines.push(`–ò–º—è: ${authUser.firstName ?? '‚Äî'} ${authUser.lastName ?? ''}`.trim());
  lines.push(`–õ–æ–≥–∏–Ω: ${authUser.username ? `@${authUser.username}` : '‚Äî'}`);
  lines.push(`–†–æ–ª—å: ${authUser.role}`);
  lines.push(`–°—Ç–∞—Ç—É—Å: ${authUser.status}`);
  lines.push(`–¢–µ–ª–µ—Ñ–æ–Ω: ${phoneLabel}`);
  lines.push(`–ì–æ—Ä–æ–¥: ${authUser.citySelected ?? '‚Äî'}`);

  return lines.join('\n');
};

export const isSafeModeSession = (ctx: BotContext): boolean =>
  ctx.session.safeMode === true
  || ctx.session.isDegraded === true
  || ctx.auth?.user.status === 'safe_mode';

export const registerSafeModeActions = (bot: Telegraf<BotContext>): void => {
  bot.action(SAFE_MODE_PROFILE_ACTION, async (ctx) => {
    try {
      await ctx.answerCbQuery();
    } catch {
      // Ignore answer errors
    }

    if (ctx.chat?.type !== 'private') {
      if (ctx.chat) {
        try {
          await ctx.reply('–ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ.');
        } catch {
          // Ignore
        }
      }
      return;
    }

    await ctx.reply(buildProfileSummary(ctx));
  });

  bot.action(SAFE_MODE_CITY_ACTION, async (ctx) => {
    if (ctx.chat?.type !== 'private') {
      try {
        await ctx.answerCbQuery('–°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ.');
      } catch {
        // Ignore
      }
      return;
    }

    try {
      await ctx.answerCbQuery();
    } catch {
      // Ignore
    }

    await askCity(ctx, '–°–º–µ–Ω–∏—Ç–µ –≥–æ—Ä–æ–¥:');
  });

  bot.action(SAFE_MODE_SUPPORT_ACTION, async (ctx) => {
    if (ctx.chat?.type !== 'private') {
      try {
        await ctx.answerCbQuery('–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–∑ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞.');
      } catch {
        // Ignore
      }
      return;
    }

    try {
      await ctx.answerCbQuery();
    } catch {
      // Ignore
    }

    await promptClientSupport(ctx);
  });
};

export const __testing__ = {
  buildSafeModeCardText,
  buildProfileSummary,
  SAFE_MODE_ACTIONS: SAFE_MODE_CARD_ACTIONS,
};
