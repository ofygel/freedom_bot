import type { MiddlewareFn } from 'telegraf';

import { executorKeyboard, onboardingKeyboard, removeKeyboard } from '../ui/menus';
import type { BotContext } from '../types';
import { logger } from '../../config';

const GUEST_ALLOWLIST = new Set<string>([
  '/start',
  '/help',
  '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
  '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä',
  'üì≤ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º',
]);

const isContactMessage = (ctx: BotContext): boolean =>
  Boolean((ctx.message as { contact?: unknown } | undefined)?.contact);

const getMessageText = (ctx: BotContext): string | undefined => {
  const message = ctx.message as { text?: unknown } | undefined;
  if (!message || typeof message.text !== 'string') {
    return undefined;
  }
  const trimmed = message.text.trim();
  return trimmed.length > 0 ? trimmed : undefined;
};

export const stateGate = (): MiddlewareFn<BotContext> => async (ctx, next) => {
  const chatType = ctx.chat?.type;
  const isChannelChat = chatType === 'channel';

  if (chatType && chatType !== 'private') {
    await next();
    return;
  }

  const user = ctx.auth?.user;
  const text = getMessageText(ctx);
  const isCallbackQuery = Boolean(ctx.callbackQuery);

  const answerCallbackQuery = async (message: string) => {
    if (!isCallbackQuery || typeof ctx.answerCbQuery !== 'function') {
      return;
    }

    try {
      await ctx.answerCbQuery(message, { show_alert: false });
    } catch (error) {
      logger.debug({ err: error }, 'Failed to answer callback query in stateGate');
    }
  };

  if (!user || user.status === 'awaiting_phone' || !user.phoneVerified) {
    if (!text || GUEST_ALLOWLIST.has(text) || isContactMessage(ctx)) {
      await next();
      return;
    }

    const warning = '–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.';
    await answerCallbackQuery(warning);

    if (!isCallbackQuery || !isChannelChat) {
      await ctx.reply(warning, onboardingKeyboard());
    }
    return;
  }

  if (user.status === 'suspended' || user.status === 'banned') {
    const warning = '–î–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.';
    await answerCallbackQuery(warning);

    if (!isCallbackQuery || !isChannelChat) {
      await ctx.reply(warning, removeKeyboard());
    }
    return;
  }

  if (user.status === 'trial_expired') {
    const warning =
      '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã.';
    await answerCallbackQuery(warning);

    if (!isCallbackQuery || !isChannelChat) {
      await ctx.reply(warning, executorKeyboard());
    }
    return;
  }

  await next();
};
